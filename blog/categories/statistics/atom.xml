<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: statistics | Statistically Significant]]></title>
  <link href="http://andland.github.io/blog/categories/statistics/atom.xml" rel="self"/>
  <link href="http://andland.github.io/"/>
  <updated>2014-04-22T21:41:26-04:00</updated>
  <id>http://andland.github.io/</id>
  <author>
    <name><![CDATA[Andrew Landgraf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yet Another Baseball Defense Statistic]]></title>
    <link href="http://andland.github.io/blog/2014/04/22/yet-another-baseball-defensive-statistic/"/>
    <updated>2014-04-22T22:00:00-04:00</updated>
    <id>http://andland.github.io/blog/2014/04/22/yet-another-baseball-defensive-statistic</id>
    <content type="html"><![CDATA[<p><a href="http://www.fangraphs.com">Fangraphs</a> recently published an interesting dataset that measures defensive efficiency of fielders. For each player, the <a href="http://www.fangraphs.com/blogs/inside-edge-fielding-data/">Inside Edge</a> dataset breaks their opportunities to make plays into five categories, ranging from almost impossible to routine. It also records the proportion of times that the player successfully made the play. With this data, we can see how successful each player is for each type of play. I wanted to think of a way to combine these five proportions into one fielding metric. From here on, I will assume that there is no error in categorizing a play as easy or hard and that there is no bias in the categorizations.</p>

<h3 id="model">Model</h3>

<p>The model I will build is motivated by <a href="http://en.wikipedia.org/wiki/Ordered_logit">ordinal regression</a>. If we only were concerned with the success rate in one of the categories, we could use standard logistic regression, and the probability that player $i$ successfully made a play would be assumed to be $\sigma(\theta_i)$, where $\sigma()$ is the <a href="https://en.wikipedia.org/wiki/Logistic_function">logistic function</a>. Using our prior knowledge that plays categorized as easy should have a higher success rate than plays categorized as difficult, I would like to generalize this. </p>

<p>Say there are only two categories: easy and hard. We could model the probability that player $i$ successfully made an hard play as $\sigma(\theta_i)$ and the probability that he made an easy play as $\sigma(\theta_i+\gamma)$. Here, we would assume that $\gamma$ is the same for all players. This assumption implies that if player $i$ is better than player $j$ at easy plays, he will also be better at hard plays. This is a reasonable assumption, but maybe not true in all cases.</p>

<p>Since we have five different categories of difficulty, we can generalize this by having $\gamma_k, k=1,\ldots,4$. Again, these $\gamma_k$&rsquo;s would be the same for everyone. A picture of what this looks like for shortstops is below. In this model, every player will effectively be shifting the curve either left or right. A positive $\theta_i$ means the player is better than average and cause the curve to shift left and vice versa for negative $\theta_i$.</p>

<p><img src="/images/InsideEdge/LogitOrdered.png" title="Logit Ordered" ></p>

<p>I modeled this as a multi-level mixed effects model, with the players being random effects and the $\gamma_k$&rsquo;s being fixed. Technically, I should optimize subject to the condition that the $\gamma_k$&rsquo;s are increasing, but the unconstrained optimization always yields increasing $\gamma_k$&rsquo;s because there is a big difference between success rate in the categories. I used combined data from 2012 and 2013 seasons and included all players with at least one success and one failure. I modeled each position separately. Modeling player effects as random, there is a fair amount of regression to the mean built in. In this sense, I am more trying to estimate the true ability of the player, rather than measuring what he did during the two years. This is an important distinction, which may differ from other defensive statistics.</p>

<h3 id="model-fit">Model fit</h3>

<p>Below is a summary of the results of the model for shortstops. I am only plotting the players with the at least 800 innings, for readability. A bonus of modeling the data like this is that we get standard error estimates as a result. I plotted the estimated effect of each player along with +/- 2 standard errors. We can be fairly certain that the effects for the top few shortstops is greater than 0 since their confidence intervals do not include 0. The same is true for the bottom few. Images for the other positions can be found <a href="https://github.com/andland/andland.github.com/tree/master/images/InsideEdge">here</a>.</p>

<p><img src="/images/InsideEdge/SSlist.png" title="Results for shortstops" ></p>

<p>The results seem to make sense for the most part. Simmons and Tulowitzki have reputations as being strong defenders and Derek Jeter has a reputation as a poor defender.</p>

<p>Further, I can validate this data by comparing it to other defensive metrics. One that is readily available on Fangraphs is UZR per 150 games. For each position, I took the correlation of my estimated effect with UZR per 150 games, weighted by the number of innings played. Pitchers and catchers do not have UZR&rsquo;s so I cannot compare them. The correlations, which are in the plot below, range from about 0.2 to 0.65.</p>

<p><img src="/images/InsideEdge/CorrelationWithUZR.png" title="Correlation with UZR" ></p>

<h3 id="interpreting-parameters">Interpreting parameters</h3>

<p>In order to make this fielding metric more useful, I would like to convert the parameters to something more interpretable. One option which makes a lot of sense is &ldquo;plays made above/below average&rdquo;. Given an estimated $\theta_i$ for a player, we can calculate the probability that he would make a play in each of the five categories. We can then compare those probabilities to the probability an average player would make a play in each of the categories, which would be fit with $\theta=0$. Finally, we can weight these differences in probabilities by the relative rate that plays of various difficulties occur. </p>

<p>For example, assuming there are only two categories again, suppose a player has a 0.10 and 0.05 higher probability than average of making hard and easy plays, respectively. Further assume that 75% of all plays are hard and 25% are easy. On a random play, the improvement in probability over an average player of making a play is $.10(.75)+.05(.25)=0.0875$. If a player has an opportunity for 300 plays in an average season, this player would be $300 \times 0.0875=26.25$ plays better than average over a typical season.</p>

<p>I will assume that the number of opportunities to make plays is directly related to the number of innings played. To convert innings to opportunities, I took the median number of opportunities per inning for each position. For example, shortstops had the highest opportunities per inning at 0.40 and catchers had the lowest at 0.08. The plot below shows the distribution of opportunities per inning for each position.</p>

<p><img src="/images/InsideEdge/PlaysPerInning.png" title="Plays Per Inning by Position" ></p>

<p>We can extend this to the impact on saving runs from being scored as well by assuming each successful play saves $x$ runs. I will not do this for this analysis.</p>

<h3 id="results">Results</h3>

<p><a href="http://spark.rstudio.com/andland/InsideEdgeBaseballFielding/"><img src="/images/InsideEdge/shiny.png" title="Shiny app" ></a></p>

<p>Finally, I put together a <a href="http://www.rstudio.com/shiny/">Shiny</a> app to display <a href="http://spark.rstudio.com/andland/InsideEdgeBaseballFielding/">the results</a>. You can search by team, position, and innings played. A team of &lsquo;- - -&lsquo; means the player played for multiple teams over this period. You can also choose to display the results as a rate statistic (extra plays made per season) or a count statistic (extra plays made over the two seasons). To get a seasonal number, I assume position players played 150 games with 8.5 innings in each game. For pitchers, I assumed that they pitched 30 games, 6 innings each. </p>

<h3 id="conclusions-and-future-work">Conclusions and future work</h3>

<p>I don&rsquo;t know if I will do anything more with this data, but if I could do it again, I may have modeled each year separately instead of combining the two years together. With that, it would have been interesting to model the effect of age by observing how a player&rsquo;s ability to make a play changes from one year to the next. I also think it would be interesting to see how changing positions affects a players efficiency. For example, we could have a $9 \times 9$ matrix of fixed effects that represent the improvement or degradation in ability as a player switches from their main position to another one. Further assumptions would be needed to make sure the $\theta$&rsquo;s are on the same scale for every position.</p>

<p>At the very least, this model and its results can be considered another data point in the analysis of a player&rsquo;s fielding ability. One thing we need to be concerned about is the classification of each play into the difficultness categories. The human eye can be fooled into thinking a routine play is hard just because a fielder dove to make the play, when a superior fielder could have made it look easier.</p>

<h3 id="code">Code</h3>

<p>I have put the R code together to do this analysis in <a href="https://gist.github.com/andland/c6adb69ea365c2580859">a gist</a>. If there is interest, I will put together a repo with all the data as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hastie and Tibshirani Interview Jerome Friedman]]></title>
    <link href="http://andland.github.io/blog/2014/03/02/hastie-and-tibshirani-interview-jerome-friedman+-+Copy/"/>
    <updated>2014-03-02T17:10:00-05:00</updated>
    <id>http://andland.github.io/blog/2014/03/02/hastie-and-tibshirani-interview-jerome-friedman - Copy</id>
    <content type="html"><![CDATA[<p><a href="http://www.stanford.edu/~hastie/">Trevor Hastie</a> and <a href="http://statweb.stanford.edu/~tibs/">Rob Tibshirani</a> are currently teaching a <a href="http://en.wikipedia.org/wiki/Massive_open_online_course">MOOC</a> covering an <a href="https://class.stanford.edu/courses/HumanitiesScience/StatLearning/Winter2014/about">introduction to statistical learning</a>. I am very familiar with most of the material in the course, having read <em>Elements of Statistical Learning</em> many times over.</p>

<p>One great thing about the class, however, is that they are truely experts and have collaborated with many of the influencial researchers in their field. Because of this, when covering certain topics, they have included interviews with statisticians who made important developments to the field. When introducing the class to R, they interviewed <a href="https://www.youtube.com/watch?v=jk9S3RTAl38">John Chambers</a>, who was able to give a personal account of the history of S and R because he was one of the developers. Further, when covering resampling methods, they spoke with <a href="https://www.youtube.com/watch?v=6l9V1sINzhE">Brad Efron</a>, who talked about the history of the <a href="http://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29">bootstrap</a> and how he struggled to get it published.</p>

<p>Today, they released <a href="https://www.youtube.com/watch?v=79tR7BvYE6w">a video interview</a> with Jerome Friedman. Friedman revealed many interesting facts about the history of <a href="http://en.wikipedia.org/wiki/Decision_tree_learning">tree-based methods</a>, including the fact that there weren&rsquo;t really any journal articles written about CART when they wrote <a href="http://www.amazon.com/Classification-Regression-Trees-Leo-Breiman/dp/0412048418">their book</a>. There was one quote that I particularly enjoyed.</p>

<blockquote>
  <p>And of course, I&rsquo;m very gratified that something that I was
intellectually interested in for all this time has now
become very popular and very important.
I mean, data has risen to the top.
My only regret is two of my mentors who also pushed it,
probably harder and more effectively than I did &ndash;
namely, John Tukey and Leo Breiman &ndash; are not around to
actually see how data has triumphed over,
say, theorem proving.</p>
</blockquote>

<p><div class="embed-video-container"><iframe width="640" height="480" src="http://www.youtube.com/embed/79tR7BvYE6w" frameborder="0" allowfullscreen></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Did CD102.5 Book the Summerfest Artists?]]></title>
    <link href="http://andland.github.io/blog/2013/08/27/when-did-cd1025-book-summerfest-artists/"/>
    <updated>2013-08-27T00:00:00-04:00</updated>
    <id>http://andland.github.io/blog/2013/08/27/when-did-cd1025-book-summerfest-artists</id>
    <content type="html"><![CDATA[<div class="post">
<iframe frameborder="0" height="4775" scrolling="no" src="https://dl.dropboxusercontent.com/u/17648661/CD101summerfest.html" width="100%">&amp;lt;p&amp;gt;Loading ...&amp;lt;/p&amp;gt;</iframe></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is the Probability of a 16 Seed Beating a 1 Seed?]]></title>
    <link href="http://andland.github.io/blog/2013/04/21/what-is-probability-of-16-seed-beating/"/>
    <updated>2013-04-21T00:00:00-04:00</updated>
    <id>http://andland.github.io/blog/2013/04/21/what-is-probability-of-16-seed-beating</id>
    <content type="html"><![CDATA[<div class="post">
<i><span id="goog_1885060128"></span><span id="goog_1885060129"></span>Note: I started this post way back when the NCAA men's basketball tournament was going on, but didn't finish it until now. </i><br /><br />Since the NCAA Men's Basketball Tournament has moved to 64 teams, a 16 seed as never upset a 1 seed. You might be tempted to say that the probability of such an event must be 0 then. But we know better than that.<br /><br />In this post, I am interested in looking at different ways of estimating how the odds of winning a game change as the difference between seeds increases. I was able to download tournament data going back to the 1930s until 2012 from <a href="http://hoopstournament.net/Database.html">hoopstournament.net/Database.html</a>. The tournament expanded to 64 teams in 1985, which is what I used for this post. I only used match ups in which one of the seeds was higher than the other because this was the easiest way to remove duplicates. (The database has each game listed twice, once with the winner as the first team and once with the loser as the first team. The vast majority (98.9%) of games had one team as a higher seed because an equal seed can only happen at the Final Four or later.)<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;"><a href="http://inside-r.org/r-doc/base/library"><span style="color: #003399; font-weight: bold;">library</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/packages/cran/ggplot2">ggplot2</a><span style="color: #009900;">)</span><span style="color: #339933;">;</span> theme_set<span style="color: #009900;">(</span>theme_bw<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />brackets=<a href="http://inside-r.org/r-doc/utils/read.csv"><span style="color: #003399; font-weight: bold;">read.csv</span></a><span style="color: #009900;">(</span><span style="color: blue;">"NCAAHistory.csv"</span><span style="color: #009900;">)</span><br />&nbsp;<br /><span style="color: #666666; font-style: italic;"># use only data from 1985 on in which the first team has the higher seed</span><br />brackets=<a href="http://inside-r.org/r-doc/base/subset"><span style="color: #003399; font-weight: bold;">subset</span></a><span style="color: #009900;">(</span>brackets<span style="color: #339933;">,</span>Seed&lt;Opponent.Seed &amp; Year&gt;=<span style="color: #cc66cc;">1985</span> &amp; <a href="http://inside-r.org/r-doc/base/Round"><span style="color: #003399; font-weight: bold;">Round</span></a>!=<span style="color: blue;">"Opening Round"</span><span style="color: #009900;">)</span><br />&nbsp;<br />brackets$SeedDiff=<a href="http://inside-r.org/r-doc/base/abs"><span style="color: #003399; font-weight: bold;">abs</span></a><span style="color: #009900;">(</span>brackets$Opponent.Seed-brackets$Seed<span style="color: #009900;">)</span><br />brackets$HigherSeedWon=<a href="http://inside-r.org/r-doc/base/ifelse"><span style="color: #003399; font-weight: bold;">ifelse</span></a><span style="color: #009900;">(</span>brackets$Opponent.Seed&gt;brackets$Seed<span style="color: #339933;">,</span>brackets$Wins<span style="color: #339933;">,</span>brackets$Losses<span style="color: #009900;">)</span><br />brackets$HigherSeedScoreDiff=<a href="http://inside-r.org/r-doc/base/ifelse"><span style="color: #003399; font-weight: bold;">ifelse</span></a><span style="color: #009900;">(</span>brackets$Opponent.Seed&gt;brackets$Seed<span style="color: #339933;">,</span><span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span>-<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>*<span style="color: #009900;">(</span>brackets$Score-brackets$Opponent.Score<span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><h3>Use Frequencies</h3><div class="separator" style="clear: both; text-align: center;"></div>The first way is the most simple: look at the historical records when a 16 seed is playing a 1 seed (where the seed difference is 15). As you can see from the plot below, when the seed difference is 15, the higher seeded team has won every time. This is also true when the seed difference is 12, although there have only been 4 games in this scenario. Another oddity is that when the seed difference is 10, the higher seed only has only won 50% of the time. Again, this is largely due to the fact that there have only been 6 games with this seed difference.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;">seed.diffs=<a href="http://inside-r.org/r-doc/base/sort"><span style="color: #003399; font-weight: bold;">sort</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/unique"><span style="color: #003399; font-weight: bold;">unique</span></a><span style="color: #009900;">(</span>brackets$SeedDiff<span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />win.pct=<a href="http://inside-r.org/r-doc/base/sapply"><span style="color: #003399; font-weight: bold;">sapply</span></a><span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/function"><span style="color: #003399; font-weight: bold;">function</span></a><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span> <a href="http://inside-r.org/r-doc/base/mean"><span style="color: #003399; font-weight: bold;">mean</span></a><span style="color: #009900;">(</span>brackets$HigherSeedWon<span style="color: #009900;">[</span>brackets$SeedDiff==x<span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br /><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=<a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span>win.pct<span style="color: #009900;">)</span><span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span>win.pct<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+geom_point<span style="color: #009900;">(</span><span style="color: #009900;">)</span>+<br />  geom_hline<span style="color: #009900;">(</span>yintercept=<span style="color: #cc66cc;">0.5</span><span style="color: #339933;">,</span>linetype=<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span><span style="color: #009900;">)</span>+labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Proportion of Games Won by Higher Seed"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-4FoTKgiyX10/UXLrF8YV2tI/AAAAAAAAHtU/jgQ3FfibzQg/s1600/Frequencies.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-4FoTKgiyX10/UXLrF8YV2tI/AAAAAAAAHtU/jgQ3FfibzQg/s1600/Frequencies.jpeg" /></a></div><br /><h3>Use Score Difference</h3>In many applications, it has been shown that using margin of victory is much more reliable than just wins and losses. For example, in the computer ranking of College Football teams, using score differences is more accurate, but outlawed for fear that teams would run up the score on weaker opponents. So the computer rankings are not as strong as they could be.<br /><br />We have no such conflict of interest, so we should try to make use of any information available. A simple way to do that is to look at the mean and standard deviation of the margin of victory when the 16 seed is playing the 1 seed. Below is a plot of the mean score difference with a ribbon for the +/- 2 standard deviations.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;">seed.diffs=<a href="http://inside-r.org/r-doc/base/sort"><span style="color: #003399; font-weight: bold;">sort</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/unique"><span style="color: #003399; font-weight: bold;">unique</span></a><span style="color: #009900;">(</span>brackets$SeedDiff<span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />means=<a href="http://inside-r.org/r-doc/base/sapply"><span style="color: #003399; font-weight: bold;">sapply</span></a><span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/function"><span style="color: #003399; font-weight: bold;">function</span></a><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span> <a href="http://inside-r.org/r-doc/base/mean"><span style="color: #003399; font-weight: bold;">mean</span></a><span style="color: #009900;">(</span>brackets$HigherSeedScoreDiff<span style="color: #009900;">[</span>brackets$SeedDiff==x<span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />sds=<a href="http://inside-r.org/r-doc/base/sapply"><span style="color: #003399; font-weight: bold;">sapply</span></a><span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/function"><span style="color: #003399; font-weight: bold;">function</span></a><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span> <a href="http://inside-r.org/r-doc/stats/sd"><span style="color: #003399; font-weight: bold;">sd</span></a><span style="color: #009900;">(</span>brackets$HigherSeedScoreDiff<span style="color: #009900;">[</span>brackets$SeedDiff==x<span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br /><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=<a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span>means<span style="color: #339933;">,</span>sds<span style="color: #009900;">)</span><span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span>means<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  geom_ribbon<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>ymin=means-<span style="color: #cc66cc;">2</span>*sds<span style="color: #339933;">,</span>ymax=means+<span style="color: #cc66cc;">2</span>*sds<span style="color: #009900;">)</span><span style="color: #339933;">,</span>alpha=<span style="color: #cc66cc;">.5</span><span style="color: #009900;">)</span>+geom_point<span style="color: #009900;">(</span><span style="color: #009900;">)</span>+geom_line<span style="color: #009900;">(</span><span style="color: #009900;">)</span>+<br />  geom_hline<span style="color: #009900;">(</span>yintercept=<span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>linetype=<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Margin of Victory by Higher Seed"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-4VaSHpRws2A/UXLrGMODjhI/AAAAAAAAHtQ/7JrGAbDYY4A/s1600/MarginOfVictory.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-4VaSHpRws2A/UXLrGMODjhI/AAAAAAAAHtQ/7JrGAbDYY4A/s1600/MarginOfVictory.jpeg" /></a></div><br /><br />You can see that the ribbon includes zero for all seed differences except 15. If we assume that the score differences are roughly normal, we can calculate the probability that the score difference will be greater than 0. The results are largely the same as before, but we see now that there are no 100% estimates. Also, the 50% win percentage for a seed difference of 10 now looks a little more reasonable, albeit still out of line with the rest.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;"><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=<a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span>means<span style="color: #339933;">,</span>sds<span style="color: #009900;">)</span><span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>seed.diffs<span style="color: #339933;">,</span><span style="color: #cc66cc;">1</span>-<a href="http://inside-r.org/r-doc/stats/pnorm"><span style="color: #003399; font-weight: bold;">pnorm</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>means<span style="color: #339933;">,</span>sds<span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  geom_point<span style="color: #009900;">(</span><span style="color: #009900;">)</span>+geom_line<span style="color: #009900;">(</span><span style="color: #009900;">)</span>+geom_hline<span style="color: #009900;">(</span>yintercept=<span style="color: #cc66cc;">0.5</span><span style="color: #339933;">,</span>linetype=<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Probability of Higher Seed Winning Based on Margin of Victory"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-0IRgSQFoL9M/UXLrF7iNsYI/AAAAAAAAHtM/G-7h8k1yLAA/s1600/ProbMarginOfVictory.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-0IRgSQFoL9M/UXLrF7iNsYI/AAAAAAAAHtM/G-7h8k1yLAA/s1600/ProbMarginOfVictory.jpeg" /></a></div><br /><h3>Model Win Percentage as a Function of&nbsp; Seed Difference</h3>It is always good to incorporate as much knowledge as possible into an analysis. In this case, we have information on other games besides the 16 versus 1 seed game which help us estimate the 16 versus 1 game. For example, it is reasonable to assume that the larger the difference in seed is, the more likely the higher seed will win. We can build a logistic regression model which looks at all of the outcomes of all of the games and predicts the probability of winning based on the difference in seed. When the two teams have the same seed, I enforced the probability of the higher seed winning to be 0.5 by making the intercept 0.<br /><br />In the plot below, you can see that the logistic model predicts that the probability of winning increases throughout until reaching about 90% for the 16 versus 1. I also included a non-linear generalized additive model (GAM) model for comparison. The GAM believes that being a big favorite (16 vs 1 or 15 vs 2) gives an little boost in win probability. An advantage of modeling is that we can make predictions for match-ups that have never occurred (like a seed difference of 14). <br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;"><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=brackets<span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>SeedDiff<span style="color: #339933;">,</span>HigherSeedWon<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  stat_smooth<span style="color: #009900;">(</span>method=<span style="color: blue;">"gam"</span><span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/family"><span style="color: #003399; font-weight: bold;">family</span></a>=<span style="color: blue;">"binomial"</span><span style="color: #339933;">,</span>se=F<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/formula"><span style="color: #003399; font-weight: bold;">formula</span></a>=y~<span style="color: #cc66cc;">0</span>+x<span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>colour=<span style="color: blue;">"Logistic"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  stat_smooth<span style="color: #009900;">(</span>method=<span style="color: blue;">"gam"</span><span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/family"><span style="color: #003399; font-weight: bold;">family</span></a>=<span style="color: blue;">"binomial"</span><span style="color: #339933;">,</span>se=F<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/formula"><span style="color: #003399; font-weight: bold;">formula</span></a>=y~<a href="http://inside-r.org/r-doc/mgcv/s"><span style="color: #003399; font-weight: bold;">s</span></a><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span><span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>colour=<span style="color: blue;">"GAM"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_jitter<span style="color: #009900;">(</span>alpha=<span style="color: #cc66cc;">.15</span><span style="color: #339933;">,</span>position = position_jitter<span style="color: #009900;">(</span>height = <span style="color: #cc66cc;">.025</span><span style="color: #339933;">,</span>width=<span style="color: #cc66cc;">.25</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Game Won by Higher Seed"</span><span style="color: #339933;">,</span>colour=<span style="color: blue;">"Model"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-QYWl4914Phc/UXLwH3ls3mI/AAAAAAAAHtY/7CMeKo0ZH5M/s1600/Model01.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-QYWl4914Phc/UXLwH3ls3mI/AAAAAAAAHtY/7CMeKo0ZH5M/s1600/Model01.jpeg" /></a></div><br /><h3>Model Score Difference as a Function of&nbsp; Seed Difference</h3>We can also do the same thing with margin of victory. Here, I constrain the linear model to have an intercept of 0, meaning that two teams with the same seed should be evenly matched. Again, I included the GAM fit for comparison. The interpretations are similar to before, in that it seems that there is an increase in margin of victory for the heavily favored teams.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;"><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=brackets<span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>SeedDiff<span style="color: #339933;">,</span>HigherSeedScoreDiff<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  stat_smooth<span style="color: #009900;">(</span>method=<span style="color: blue;">"lm"</span><span style="color: #339933;">,</span>se=F<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/formula"><span style="color: #003399; font-weight: bold;">formula</span></a>=y~<span style="color: #cc66cc;">0</span>+x<span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>colour=<span style="color: blue;">"Linear"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  stat_smooth<span style="color: #009900;">(</span>method=<span style="color: blue;">"gam"</span><span style="color: #339933;">,</span>se=F<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/formula"><span style="color: #003399; font-weight: bold;">formula</span></a>=y~<a href="http://inside-r.org/r-doc/mgcv/s"><span style="color: #003399; font-weight: bold;">s</span></a><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span><span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>colour=<span style="color: blue;">"GAM"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_jitter<span style="color: #009900;">(</span>alpha=<span style="color: #cc66cc;">.25</span><span style="color: #339933;">,</span>position = position_jitter<span style="color: #009900;">(</span>height = <span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>width=<span style="color: #cc66cc;">.25</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Margin of Victory by Higher Seed"</span><span style="color: #339933;">,</span>colour=<span style="color: blue;">"Model"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-ncQ9W4oFjU8/UXLyGTZLNuI/AAAAAAAAHtg/5MqlA6ZbX8c/s1600/ModelDiff.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-ncQ9W4oFjU8/UXLyGTZLNuI/AAAAAAAAHtg/5MqlA6ZbX8c/s1600/ModelDiff.jpeg" /></a></div><br />From these models of margin of victory we can infer the probability of the higher seed winning (again, assuming normality).<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;"><a href="http://inside-r.org/r-doc/base/library"><span style="color: #003399; font-weight: bold;">library</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/mgcv/gam"><span style="color: #003399; font-weight: bold;">gam</span></a><span style="color: #009900;">)</span><br />lm.seed=<a href="http://inside-r.org/r-doc/stats/lm"><span style="color: #003399; font-weight: bold;">lm</span></a><span style="color: #009900;">(</span>HigherSeedScoreDiff~<span style="color: #cc66cc;">0</span>+SeedDiff<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=brackets<span style="color: #009900;">)</span><br />gam.seed=<a href="http://inside-r.org/r-doc/mgcv/gam"><span style="color: #003399; font-weight: bold;">gam</span></a><span style="color: #009900;">(</span>HigherSeedScoreDiff~<a href="http://inside-r.org/r-doc/mgcv/s"><span style="color: #003399; font-weight: bold;">s</span></a><span style="color: #009900;">(</span>SeedDiff<span style="color: #009900;">)</span><span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=brackets<span style="color: #009900;">)</span><br />&nbsp;<br />pred.lm.seed=<a href="http://inside-r.org/r-doc/stats/predict"><span style="color: #003399; font-weight: bold;">predict</span></a><span style="color: #009900;">(</span>lm.seed<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=<span style="color: #cc66cc;">0</span>:<span style="color: #cc66cc;">15</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>se.fit=<span style="color: black; font-weight: bold;">TRUE</span><span style="color: #009900;">)</span><br />pred.gam.seed=<a href="http://inside-r.org/r-doc/stats/predict"><span style="color: #003399; font-weight: bold;">predict</span></a><span style="color: #009900;">(</span>gam.seed<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=<span style="color: #cc66cc;">0</span>:<span style="color: #cc66cc;">15</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>se.fit=<span style="color: black; font-weight: bold;">TRUE</span><span style="color: #009900;">)</span><br />se.lm=<a href="http://inside-r.org/r-doc/base/sqrt"><span style="color: #003399; font-weight: bold;">sqrt</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/mean"><span style="color: #003399; font-weight: bold;">mean</span></a><span style="color: #009900;">(</span>lm.seed$residuals^<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />se.gam=<a href="http://inside-r.org/r-doc/base/sqrt"><span style="color: #003399; font-weight: bold;">sqrt</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/mean"><span style="color: #003399; font-weight: bold;">mean</span></a><span style="color: #009900;">(</span>gam.seed$residuals^<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />&nbsp;<br />df1=<a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=<span style="color: #cc66cc;">0</span>:<span style="color: #cc66cc;">15</span><span style="color: #339933;">,</span>ProbLM=<span style="color: #cc66cc;">1</span>-<a href="http://inside-r.org/r-doc/stats/pnorm"><span style="color: #003399; font-weight: bold;">pnorm</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>pred.lm.seed$fit<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/sqrt"><span style="color: #003399; font-weight: bold;">sqrt</span></a><span style="color: #009900;">(</span>se.lm^<span style="color: #cc66cc;">2</span>+pred.lm.seed$se.fit^<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span><br />               ProbGAM=<span style="color: #cc66cc;">1</span>-<a href="http://inside-r.org/r-doc/stats/pnorm"><span style="color: #003399; font-weight: bold;">pnorm</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>pred.gam.seed$fit<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/sqrt"><span style="color: #003399; font-weight: bold;">sqrt</span></a><span style="color: #009900;">(</span>se.gam^<span style="color: #cc66cc;">2</span>+pred.gam.seed$se.fit^<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br /><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span>df1<span style="color: #009900;">)</span>+geom_hline<span style="color: #009900;">(</span>yintercept=<span style="color: #cc66cc;">0.5</span><span style="color: #339933;">,</span>linetype=<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>SeedDiff<span style="color: #339933;">,</span>ProbLM<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Linear"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>SeedDiff<span style="color: #339933;">,</span>ProbGAM<span style="color: #339933;">,</span>colour=<span style="color: blue;">"GAM"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Probability of Higher Seed Winning"</span><span style="color: #339933;">,</span>colour=<span style="color: blue;">"Model"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-ZI7n4agC0J8/UXL4fH2dTzI/AAAAAAAAHts/6ia23BR7e7w/s1600/ModelDiffProbs.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-ZI7n4agC0J8/UXL4fH2dTzI/AAAAAAAAHts/6ia23BR7e7w/s1600/ModelDiffProbs.jpeg" /></a></div><br /><h3>Summary</h3>Putting all of the estimates together, you can easily spot the differences between the models. The two assumptions that just used the data between specific seeds look pretty similar. It looks like using score differential is a little more reasonable of the two. The two GAMs have a similar trend and so did the&nbsp; linear and logistic models. If someone asks you what the probability that a 16 seed beats a 1 seed, you have at least 6 different answers.<br /><br />This post highlights the many different ways someone can analyze the same data. Simply statistics talked a bit about this in a <a href="http://simplystatistics.org/2013/04/19/podcast-7-reinhart-rogoff-reproducibility/">recent podcast</a>. In this case, the differences are not huge, but there are noticeable changes. So the next time you read about an analysis that someone did, keep in mind all the decisions that they had to make and what type a sensitivity they would have on the results.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;">logit.seed=<a href="http://inside-r.org/r-doc/stats/glm"><span style="color: #003399; font-weight: bold;">glm</span></a><span style="color: #009900;">(</span>HigherSeedWon~<span style="color: #cc66cc;">0</span>+SeedDiff<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=brackets<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/family"><span style="color: #003399; font-weight: bold;">family</span></a>=<a href="http://inside-r.org/r-doc/stats/binomial"><span style="color: #003399; font-weight: bold;">binomial</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/boot/logit"><span style="color: #003399; font-weight: bold;">logit</span></a><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />logit.seed.gam=<a href="http://inside-r.org/r-doc/mgcv/gam"><span style="color: #003399; font-weight: bold;">gam</span></a><span style="color: #009900;">(</span>HigherSeedWon~<a href="http://inside-r.org/r-doc/mgcv/s"><span style="color: #003399; font-weight: bold;">s</span></a><span style="color: #009900;">(</span>SeedDiff<span style="color: #009900;">)</span><span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/utils/data"><span style="color: #003399; font-weight: bold;">data</span></a>=brackets<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/stats/family"><span style="color: #003399; font-weight: bold;">family</span></a>=<a href="http://inside-r.org/r-doc/stats/binomial"><span style="color: #003399; font-weight: bold;">binomial</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/boot/logit"><span style="color: #003399; font-weight: bold;">logit</span></a><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />&nbsp;<br />df2=<a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=<span style="color: #cc66cc;">0</span>:<span style="color: #cc66cc;">15</span><span style="color: #339933;">,</span><br />               ProbLM=<span style="color: #cc66cc;">1</span>-<a href="http://inside-r.org/r-doc/stats/pnorm"><span style="color: #003399; font-weight: bold;">pnorm</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>pred.lm.seed$fit<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/sqrt"><span style="color: #003399; font-weight: bold;">sqrt</span></a><span style="color: #009900;">(</span>se.lm^<span style="color: #cc66cc;">2</span>+pred.lm.seed$se.fit^<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span><br />               ProbGAM=<span style="color: #cc66cc;">1</span>-<a href="http://inside-r.org/r-doc/stats/pnorm"><span style="color: #003399; font-weight: bold;">pnorm</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>pred.gam.seed$fit<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/sqrt"><span style="color: #003399; font-weight: bold;">sqrt</span></a><span style="color: #009900;">(</span>se.gam^<span style="color: #cc66cc;">2</span>+pred.gam.seed$se.fit^<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span><br />               ProbLogit=<a href="http://inside-r.org/r-doc/stats/predict"><span style="color: #003399; font-weight: bold;">predict</span></a><span style="color: #009900;">(</span>logit.seed<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=<span style="color: #cc66cc;">0</span>:<span style="color: #cc66cc;">15</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>type=<span style="color: blue;">"response"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span><br />               ProbLogitGAM=<a href="http://inside-r.org/r-doc/stats/predict"><span style="color: #003399; font-weight: bold;">predict</span></a><span style="color: #009900;">(</span>logit.seed.gam<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=<span style="color: #cc66cc;">0</span>:<span style="color: #cc66cc;">15</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>type=<span style="color: blue;">"response"</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><br />df2=<a href="http://inside-r.org/r-doc/base/merge"><span style="color: #003399; font-weight: bold;">merge</span></a><span style="color: #009900;">(</span>df2<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=seed.diffs<span style="color: #339933;">,</span>ProbFreq=win.pct<span style="color: #009900;">)</span><span style="color: #339933;">,</span>all.x=T<span style="color: #009900;">)</span><br />df2=<a href="http://inside-r.org/r-doc/base/merge"><span style="color: #003399; font-weight: bold;">merge</span></a><span style="color: #009900;">(</span>df2<span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/data.frame"><span style="color: #003399; font-weight: bold;">data.frame</span></a><span style="color: #009900;">(</span>SeedDiff=seed.diffs<span style="color: #339933;">,</span>ProbScore=<span style="color: #cc66cc;">1</span>-<a href="http://inside-r.org/r-doc/stats/pnorm"><span style="color: #003399; font-weight: bold;">pnorm</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span>means<span style="color: #339933;">,</span>sds<span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>all.x=T<span style="color: #009900;">)</span><br /><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span>df2<span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>SeedDiff<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+geom_hline<span style="color: #009900;">(</span>yintercept=<span style="color: #cc66cc;">0.5</span><span style="color: #339933;">,</span>linetype=<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbLM<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Linear"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbGAM<span style="color: #339933;">,</span>colour=<span style="color: blue;">"GAM"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbLogit<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Logistic"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbLogitGAM<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Logistic GAM"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbFreq<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Frequencies"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_line<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbScore<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Score Diff"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>+<br />  geom_point<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbFreq<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Frequencies"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">3</span><span style="color: #009900;">)</span>+<br />  geom_point<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>y=ProbScore<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Score Diff"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">3</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Seed Difference"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Probability of Higher Seed Winning"</span><span style="color: #339933;">,</span>colour=<span style="color: blue;">"Model"</span><span style="color: #009900;">)</span><br />&nbsp;<br /><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span>df2<span style="color: #009900;">)</span>+geom_hline<span style="color: #009900;">(</span>yintercept=<span style="color: #cc66cc;">0.5</span><span style="color: #339933;">,</span>linetype=<span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span>+<br />  geom_point<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>x=SeedDiff<span style="color: #339933;">,</span>y=ProbFreq<span style="color: #339933;">,</span>colour=<span style="color: blue;">"Frequencies"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>size=<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-hLA30tdetII/UXL4fBT844I/AAAAAAAAHtw/hZiyPKG1o_g/s1600/AllProbs.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-hLA30tdetII/UXL4fBT844I/AAAAAAAAHtw/hZiyPKG1o_g/s1600/AllProbs.jpeg" /></a></div><br /><i>Note that the GAM functions did not have a way to easily restrict the win probability be equal to exactly 0.5 when the seed difference is 0. That is why you may notice the GAM model is a bit above 0.5 at 0.</i></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text Decryption Using MCMC]]></title>
    <link href="http://andland.github.io/blog/2013/01/23/text-decryption-using-mcmc/"/>
    <updated>2013-01-23T00:00:00-05:00</updated>
    <id>http://andland.github.io/blog/2013/01/23/text-decryption-using-mcmc</id>
    <content type="html"><![CDATA[<div class="post">
The famous probabilist and statistician Persi Diaconis wrote an article not too long ago about the "<a href="http://math.uchicago.edu/~shmuel/Network-course-readings/MCMCRev.pdf" target="_blank">Markov chain Monte Carlo (MCMC) Revolution</a>." The paper describes how we are able to solve a diverse set of problems with MCMC. The first example he gives is a text decryption problem solved with a simple Metropolis Hastings sampler.<br /><br />I was always stumped by those <a href="https://en.wikipedia.org/wiki/Cryptogram" target="_blank">cryptograms</a> in the newspaper and thought it would be pretty cool if I could crack them with statistics. So I decided to try it out on my own. The example Diaconis gives is fleshed out in more details by its original authors in its own <a href="http://probability.ca/jeff/ftpdir/decipherart.pdf" target="_blank">article</a>. <br /><br />The decryption I will be attempting is called <a href="https://en.wikipedia.org/wiki/Substitution_cipher" target="_blank">substitution cipher</a>, where each letter of the alphabet corresponds to another letter (possibly the same one). This is the rule that you must follow for the cryptogram game too. There are 26! = 4e26 possible mappings of the letters of the alphabet to one another. This seems like a hopeless problem to solve, but I will show you that a relatively simple solution can be found as long as your reference text is large enough and the text you are trying to decipher is also large enough.<br /><br />The strategy is to use a reference text to create transition probabilities from each letter to the next. This can be stored in a 26 by 26 matrix, where the ith row and jth column is the probability of the jth letter, given the ith letter preceded it. For example, the given the previous letter was a Q, U almost always follows it, so the Q-row and U-column would be close to probability of 1. Assuming these one step transition probabilities are what matter, the likelihood of any mapping is the product of the transition probabilities observed.<br /><br />To create a transition matrix, I downloaded <i>War and Peace </i>from <a href="http://www.gutenberg.org/dirs/2/6/0/2600/2600.txt" target="_blank">Project Gutenberg</a>. I looped through each letter and kept track of the number of number of times each letter followed the previous. I also kept track of a 27th character, which was anything that was not a letter -- for example periods, commas, spaces, etc. This lets me know which letters are more likely to start a word or end a word. Consecutive entries of these special characters are not considered.<br /><br />After I have these counts, I normalize by dividing by the row total. Before normalizing, I add 1 to each cell so that there are no probabilities of 0. This also corresponds to prior information of each transition being equally likely. I could have tried to give more informative prior information (like Q to U being likely), but it would have been difficult and probably inaccurate for the whole matrix.<br /><br />Below is the code for creating the transition probability matrix. Note that I loop through each line and within each line I loop through each character.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;">reference=<a href="http://inside-r.org/r-doc/base/readLines"><span style="color: #003399; font-weight: bold;">readLines</span></a><span style="color: #009900;">(</span><span style="color: blue;">"warandpeace.txt"</span><span style="color: #009900;">)</span><br />reference=<a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span>reference<span style="color: #009900;">)</span><br />&nbsp;<br />trans.mat=<a href="http://inside-r.org/r-doc/base/matrix"><span style="color: #003399; font-weight: bold;">matrix</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">)</span><br /><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>=<a href="http://inside-r.org/r-doc/base/colnames"><span style="color: #003399; font-weight: bold;">colnames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>=<a href="http://inside-r.org/r-doc/base/c"><span style="color: #003399; font-weight: bold;">c</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span><span style="color: blue;">""</span><span style="color: #009900;">)</span><br />lastletter=<span style="color: blue;">""</span><br /><span style="color: black; font-weight: bold;">for</span> <span style="color: #009900;">(</span>ln <span style="color: black; font-weight: bold;">in</span> <span style="color: #cc66cc;">1</span>:<a href="http://inside-r.org/r-doc/base/length"><span style="color: #003399; font-weight: bold;">length</span></a><span style="color: #009900;">(</span>reference<span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />  <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>ln %% <span style="color: #cc66cc;">1000</span> ==<span style="color: #cc66cc;">0</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><a href="http://inside-r.org/r-doc/base/cat"><span style="color: #003399; font-weight: bold;">cat</span></a><span style="color: #009900;">(</span><span style="color: blue;">"Line"</span><span style="color: #339933;">,</span>ln<span style="color: #339933;">,</span><span style="color: blue;">"<span style="color: #000099; font-weight: bold;">\n</span>"</span><span style="color: #009900;">)</span><span style="color: #009900;">}</span><br />  <span style="color: black; font-weight: bold;">for</span> <span style="color: #009900;">(</span>pos <span style="color: black; font-weight: bold;">in</span> <span style="color: #cc66cc;">1</span>:<a href="http://inside-r.org/r-doc/base/nchar"><span style="color: #003399; font-weight: bold;">nchar</span></a><span style="color: #009900;">(</span>reference<span style="color: #009900;">[</span>ln<span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />    curletter=<a href="http://inside-r.org/r-doc/base/substring"><span style="color: #003399; font-weight: bold;">substring</span></a><span style="color: #009900;">(</span>reference<span style="color: #009900;">[</span>ln<span style="color: #009900;">]</span><span style="color: #339933;">,</span>pos<span style="color: #339933;">,</span>pos<span style="color: #009900;">)</span><br />    <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>curletter %in% <a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />      trans.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><br />                <a href="http://inside-r.org/r-doc/base/colnames"><span style="color: #003399; font-weight: bold;">colnames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==curletter<span style="color: #009900;">]</span>=<br />        trans.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><br />                  <a href="http://inside-r.org/r-doc/base/colnames"><span style="color: #003399; font-weight: bold;">colnames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==curletter<span style="color: #009900;">]</span>+<span style="color: #cc66cc;">1</span><br />      lastletter=curletter<br />    <span style="color: #009900;">}</span> <span style="color: black; font-weight: bold;">else</span> <span style="color: #009900;">{</span><br />      <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>lastletter!=<span style="color: blue;">""</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />        trans.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">]</span>=<br />          trans.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">]</span>+<span style="color: #cc66cc;">1</span><br />        lastletter=<span style="color: blue;">""</span><br />      <span style="color: #009900;">}</span><br />    <span style="color: #009900;">}</span><br />  <span style="color: #009900;">}</span><br />  curletter=<span style="color: blue;">""</span><br />  <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>lastletter!=<span style="color: blue;">""</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />    trans.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">]</span>=<br />      trans.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">]</span>+<span style="color: #cc66cc;">1</span><br />  <span style="color: #009900;">}</span><br />  lastletter=<span style="color: blue;">""</span><br /><span style="color: #009900;">}</span><br />&nbsp;<br />trans.prob.mat=<a href="http://inside-r.org/r-doc/base/sweep"><span style="color: #003399; font-weight: bold;">sweep</span></a><span style="color: #009900;">(</span>trans.mat+<span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span><span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span><a href="http://inside-r.org/r-doc/base/rowSums"><span style="color: #003399; font-weight: bold;">rowSums</span></a><span style="color: #009900;">(</span>trans.mat+<span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>FUN=<span style="color: blue;">"/"</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br /><br />I like to visualize my data to make sure everything looks correct. Below is a plot of the transition matrix.&nbsp; The blank space corresponds to non-letter character. A lot of insights can be garnered from this plot. The Q-U relationship pops out. T is the most likely letter to start a word. E is a popular letter to follow many others. Y is likely to end a word.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;"><a href="http://inside-r.org/packages/cran/ggplot">ggplot</a><span style="color: #009900;">(</span>melt<span style="color: #009900;">(</span>trans.prob.mat<span style="color: #009900;">)</span><span style="color: #339933;">,</span>aes<span style="color: #009900;">(</span>Var2<span style="color: #339933;">,</span>Var1<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+geom_tile<span style="color: #009900;">(</span>aes<span style="color: #009900;">(</span>fill=value<span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  scale_fill_gradient<span style="color: #009900;">(</span>low=<span style="color: blue;">"white"</span><span style="color: #339933;">,</span>high=<span style="color: blue;">"black"</span><span style="color: #339933;">,</span>limits=<a href="http://inside-r.org/r-doc/base/c"><span style="color: #003399; font-weight: bold;">c</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  labs<span style="color: #009900;">(</span>x=<span style="color: blue;">"Probability of Second Letter"</span><span style="color: #339933;">,</span>y=<span style="color: blue;">"Conditioning on First Letter"</span><span style="color: #339933;">,</span>fill=<span style="color: blue;">"Prob"</span><span style="color: #009900;">)</span>+<br />  scale_y_discrete<span style="color: #009900;">(</span>limits = <a href="http://inside-r.org/r-doc/base/rev"><span style="color: #003399; font-weight: bold;">rev</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/levels"><span style="color: #003399; font-weight: bold;">levels</span></a><span style="color: #009900;">(</span>melt<span style="color: #009900;">(</span>trans.prob.mat<span style="color: #009900;">)</span>$Var1<span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span>+<br />  coord_equal<span style="color: #009900;">(</span><span style="color: #009900;">)</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-rOSjww2Z0q0/UPlrNU1mO2I/AAAAAAAAHqM/NizWxWZ8K88/s1600/trans.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://lh3.ggpht.com/-rOSjww2Z0q0/UPlrNU1mO2I/AAAAAAAAHqM/NizWxWZ8K88/s1600/trans.jpeg" /></a></div><div class="separator" style="clear: both; text-align: center;"></div><br />The desired solution will be the one that gives the highest likelihood. This is an <a href="https://en.wikipedia.org/wiki/NP-hard" target="_blank">NP-hard</a> problem so the only way to find the solution is to try all 26! combinations of mappings, which is infeasible, and report the one with the highest likelihood.<br /><br />With the MCMC approach you start with a random mapping of letters. Next you propose a new mapping by randomly switching 2 of the characters in the mapping. So if A mapped to G and L mapped to Z and you switched those two, A would map to Z and L would map to G. With this new mapping, you measure the likelihood and divide it by the likelihood of the previous mapping. If this ratio is greater than 1, then move to this new mapping. If the ratio is less than 1, meaning the new mapping is less likely, then move to this new mapping with a probability equal to the ratio. (Practically, this is done by drawing a random uniform number between 0 and 1 and moving to the proposed mapping if the uniform number is less than the ratio.) Repeat this process until you think you have found a solution.<br /><br />To do this, I first wrote a few functions. One to decode the coded text based on the mapping. The other was to calculate the log likelihood of the decoded text.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;">decode &lt;- <a href="http://inside-r.org/r-doc/base/function"><span style="color: #003399; font-weight: bold;">function</span></a><span style="color: #009900;">(</span>mapping<span style="color: #339933;">,</span>coded<span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />  coded=<a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span>coded<span style="color: #009900;">)</span><br />  decoded=coded<br />  <span style="color: black; font-weight: bold;">for</span> <span style="color: #009900;">(</span>i <span style="color: black; font-weight: bold;">in</span> <span style="color: #cc66cc;">1</span>:<a href="http://inside-r.org/r-doc/base/nchar"><span style="color: #003399; font-weight: bold;">nchar</span></a><span style="color: #009900;">(</span>coded<span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />    <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/substring"><span style="color: #003399; font-weight: bold;">substring</span></a><span style="color: #009900;">(</span>coded<span style="color: #339933;">,</span>i<span style="color: #339933;">,</span>i<span style="color: #009900;">)</span> %in% <a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />      <a href="http://inside-r.org/r-doc/base/substring"><span style="color: #003399; font-weight: bold;">substring</span></a><span style="color: #009900;">(</span>decoded<span style="color: #339933;">,</span>i<span style="color: #339933;">,</span>i<span style="color: #009900;">)</span>=<a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">[</span>mapping==<a href="http://inside-r.org/r-doc/base/substring"><span style="color: #003399; font-weight: bold;">substring</span></a><span style="color: #009900;">(</span>coded<span style="color: #339933;">,</span>i<span style="color: #339933;">,</span>i<span style="color: #009900;">)</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><br />    <span style="color: #009900;">}</span><br />  <span style="color: #009900;">}</span><br />  decoded<br /><span style="color: #009900;">}</span><br />&nbsp;<br />&nbsp;<br />log.prob &lt;- <a href="http://inside-r.org/r-doc/base/function"><span style="color: #003399; font-weight: bold;">function</span></a><span style="color: #009900;">(</span>mapping<span style="color: #339933;">,</span>decoded<span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />  logprob=<span style="color: #cc66cc;">0</span><br />&nbsp;<br />  lastletter=<span style="color: blue;">""</span><br />  <span style="color: black; font-weight: bold;">for</span> <span style="color: #009900;">(</span>i <span style="color: black; font-weight: bold;">in</span> <span style="color: #cc66cc;">1</span>:<a href="http://inside-r.org/r-doc/base/nchar"><span style="color: #003399; font-weight: bold;">nchar</span></a><span style="color: #009900;">(</span>decoded<span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />    curletter=<a href="http://inside-r.org/r-doc/base/substring"><span style="color: #003399; font-weight: bold;">substring</span></a><span style="color: #009900;">(</span>decoded<span style="color: #339933;">,</span>i<span style="color: #339933;">,</span>i<span style="color: #009900;">)</span><br />    <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>curletter %in% <a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />      logprob=logprob+<a href="http://inside-r.org/r-doc/base/log"><span style="color: #003399; font-weight: bold;">log</span></a><span style="color: #009900;">(</span>trans.prob.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><br />                                         <a href="http://inside-r.org/r-doc/base/colnames"><span style="color: #003399; font-weight: bold;">colnames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==curletter<span style="color: #009900;">]</span><span style="color: #009900;">)</span><br />      lastletter=curletter<br />    <span style="color: #009900;">}</span> <span style="color: black; font-weight: bold;">else</span> <span style="color: #009900;">{</span><br />      <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>lastletter!=<span style="color: blue;">""</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />        logprob=logprob+<a href="http://inside-r.org/r-doc/base/log"><span style="color: #003399; font-weight: bold;">log</span></a><span style="color: #009900;">(</span>trans.prob.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><br />        lastletter=<span style="color: blue;">""</span><br />      <span style="color: #009900;">}</span><br />    <span style="color: #009900;">}</span><br />  <span style="color: #009900;">}</span><br />&nbsp;<br />  <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>lastletter!=<span style="color: blue;">""</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />    logprob=logprob+<a href="http://inside-r.org/r-doc/base/log"><span style="color: #003399; font-weight: bold;">log</span></a><span style="color: #009900;">(</span>trans.prob.mat<span style="color: #009900;">[</span><a href="http://inside-r.org/r-doc/base/rownames"><span style="color: #003399; font-weight: bold;">rownames</span></a><span style="color: #009900;">(</span>trans.mat<span style="color: #009900;">)</span>==lastletter<span style="color: #339933;">,</span><span style="color: #cc66cc;">27</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><br />    lastletter=<span style="color: blue;">""</span><br />  <span style="color: #009900;">}</span><br />  logprob<br /><span style="color: #009900;">}</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br />To show how this works, I will use the same Shakespeare text that is used in the MCMC Revolution paper. I let it run until it tries out 2000 different mappings (not the same as 2000 iterations, because rejected proposals are not counted). Along the way I am keeping track of the most likely mapping visited, and that will be the final estimate. It should be noted that I am only considering the mapping of letters and it is assumed that the special characters are known. For example spaces and periods are assumed to be the same.<br /><br /><div style="overflow: auto;"><div class="geshifilter"><pre class="r geshifilter-R" style="font-family: monospace;">correctTxt=<span style="color: blue;">"ENTER HAMLET HAM TO BE OR NOT TO BE THAT IS THE QUESTION WHETHER TIS NOBLER IN THE MIND TO SUFFER THE SLINGS AND ARROWS OF OUTRAGEOUS FORTUNE OR TO TAKE ARMS AGAINST A SEA OF TROUBLES AND BY OPPOSING END"</span><br />coded=decode<span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/sample"><span style="color: #003399; font-weight: bold;">sample</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>correctTxt<span style="color: #009900;">)</span> <span style="color: #666666; font-style: italic;"># randomly scramble the text</span><br />&nbsp;<br />mapping=<a href="http://inside-r.org/r-doc/base/sample"><span style="color: #003399; font-weight: bold;">sample</span></a><span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/base/toupper"><span style="color: #003399; font-weight: bold;">toupper</span></a><span style="color: #009900;">(</span><span style="color: black; font-weight: bold;">letters</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #666666; font-style: italic;"># initialize a random mapping</span><br />i=<span style="color: #cc66cc;">1</span><br />iters=<span style="color: #cc66cc;">2000</span><br />cur.decode=decode<span style="color: #009900;">(</span>mapping<span style="color: #339933;">,</span>coded<span style="color: #009900;">)</span><br />cur.loglike=log.prob<span style="color: #009900;">(</span>mapping<span style="color: #339933;">,</span>cur.decode<span style="color: #009900;">)</span><br />max.loglike=cur.loglike<br />max.decode=cur.decode<br /><span style="color: black; font-weight: bold;">while</span> <span style="color: #009900;">(</span>i&lt;=iters<span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />  proposal=<a href="http://inside-r.org/r-doc/base/sample"><span style="color: #003399; font-weight: bold;">sample</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">1</span>:<span style="color: #cc66cc;">26</span><span style="color: #339933;">,</span><span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span> <span style="color: #666666; font-style: italic;"># select 2 letters to switch</span><br />  prop.mapping=mapping<br />  prop.mapping<span style="color: #009900;">[</span>proposal<span style="color: #009900;">[</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">]</span><span style="color: #009900;">]</span>=mapping<span style="color: #009900;">[</span>proposal<span style="color: #009900;">[</span><span style="color: #cc66cc;">2</span><span style="color: #009900;">]</span><span style="color: #009900;">]</span><br />  prop.mapping<span style="color: #009900;">[</span>proposal<span style="color: #009900;">[</span><span style="color: #cc66cc;">2</span><span style="color: #009900;">]</span><span style="color: #009900;">]</span>=mapping<span style="color: #009900;">[</span>proposal<span style="color: #009900;">[</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">]</span><span style="color: #009900;">]</span><br />&nbsp;<br />  prop.decode=decode<span style="color: #009900;">(</span>prop.mapping<span style="color: #339933;">,</span>coded<span style="color: #009900;">)</span><br />  prop.loglike=log.prob<span style="color: #009900;">(</span>prop.mapping<span style="color: #339933;">,</span>prop.decode<span style="color: #009900;">)</span><br />&nbsp;<br />  <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span><a href="http://inside-r.org/r-doc/stats/runif"><span style="color: #003399; font-weight: bold;">runif</span></a><span style="color: #009900;">(</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span>&lt;exp<span style="color: #009900;">(</span>prop.loglike-cur.loglike<span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />    mapping=prop.mapping<br />    cur.decode=prop.decode<br />    cur.loglike=prop.loglike<br />&nbsp;<br />    <span style="color: black; font-weight: bold;">if</span> <span style="color: #009900;">(</span>cur.loglike&gt;max.loglike<span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />      max.loglike=cur.loglike<br />      max.decode=cur.decode<br />    <span style="color: #009900;">}</span><br />&nbsp;<br />    <a href="http://inside-r.org/r-doc/base/cat"><span style="color: #003399; font-weight: bold;">cat</span></a><span style="color: #009900;">(</span>i<span style="color: #339933;">,</span>cur.decode<span style="color: #339933;">,</span><span style="color: blue;">"<span style="color: #000099; font-weight: bold;">\n</span>"</span><span style="color: #009900;">)</span><br />    i=i+<span style="color: #cc66cc;">1</span><br />  <span style="color: #009900;">}</span><br /><span style="color: #009900;">}</span></pre></div></div><a href="http://www.inside-r.org/pretty-r" title="Created by Pretty R at inside-R.org">Created by Pretty R at inside-R.org</a><br /><br /><br />The output of this example is below. You can see that it comes close but it doesn't quite find the correct mapping. I attribute this to the fact that the text I was trying to decode only had 203 characters. In the paper mentioned above, they decoded the whole play. They further say that their methods work just as well if you randomly sample a text snippet 2000 characters long. Obviously my example had well less than this. This is also a problem in trying to solve a cryptogram because those are even smaller than the Hamlet example I used. So unfortunately this simple method cannot be used for that. (Note that I ran the MCMC chain a several times, using different random starting points, until it came reasonably close to the solution. This is something that the authors also suggested doing.)<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-DABUm0zHOa4/UPmFEVqbsWI/AAAAAAAAHqc/UgIi3nx4VTk/s1600/Iters.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://lh3.ggpht.com/-DABUm0zHOa4/UPmFEVqbsWI/AAAAAAAAHqc/UgIi3nx4VTk/s1600/Iters.png" /></a></div><br /><br />I want to also note that I originally used Alice and Wonderland as the reference text. It had more trouble decoding since this book is much smaller than War and Peace, and therefore the transition probabilities were not as good.<br /><br />The MCMC method is a greedy approach in that you are moving to any mapping that increases the likelihood. Greedy methods are not optimal in general because they can get stuck at local modes, especially in high dimensional problems. MCMC avoids this be moving to less likely mappings with some probability, which ensures that it will find the correct solution with enough time.</div>
<h2>Comments</h2>
<div class="comments">
<div class="comment">
<div class="author">Vivek</div>
<div class="content">
Andrew,<br /><br />This work is cool!<br /><br />I wrote my own substitution cipher decoder using the algorithm described in Stephen Connor&#39;s dissertation as the basis, but I occasionally glanced at your work as well.<br /><br />My code doesn&#39;t work as awesomely as yours, and it is also much slower (possibly because I use 76 versus the 27 characters, reachChar versus readLine), and I use different functions.<br /><br />But I cited your work and copied your idea for the melt matrix, which is ingenious.<br /><br />Thanks so much!<br /><br />Vivek</div>
</div>
<div class="comment">
<div class="author">Andrew Landgraf</div>
<div class="content">
Thanks, Fernando. I knew I could speed it up by treating it as a vector of letters (or integers), but didn&#39;t take the time to figure it out.</div>
</div>
<div class="comment">
<div class="author">Fernando</div>
<div class="content">
Nice work, but the code to get the transition matrix is VERY slow. I manage to make it faster doing the following:<br />1- get the vector of words (using scan() for example).<br />2- For each word, use strsplit(word, NULL)[[1]] and iterate<br />over the characters to populate the matrix.</div>
</div>
<div class="comment">
<div class="author">Andrew</div>
<div class="content">
I have had that issue working on different computers. I think older versions of reshape2 use X# and newer versions use Var#. Or maybe it&#39;s a difference between using the package reshape and reshape2?</div>
</div>
<div class="comment">
<div class="author">Pablik</div>
<div class="content">
Great work! Sometimes I use Persi&#39;s example for teaching MCMC,<br />there are some old matlab code from the original consultancy work,<br />but I never tryed to replicate the example.<br /><br />I got an error at:<br />ggplot(melt(trans.prob.mat),aes(Var2,Var1))+...<br /><br />the melt() function uses X1 and X2:<br />&gt; tmp &lt;- melt(trans.prob.mat)<br />&gt; head(tmp)<br />  X1 X2        value<br />1  A  A 3.893588e-05<br />2  B  A 9.252956e-02<br />...<br />Cheers,<br /><br />Pablo<br /></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
