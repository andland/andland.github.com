<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shiny on Statistically Significant</title>
    <link>/categories/shiny/</link>
    <description>Recent content in shiny on Statistically Significant</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/categories/shiny/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Top Songs by Artist on CD102.5 in 2013</title>
      <link>/2013/12/27/top-songs-by-artist-on-cd102.5-in-2013/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/12/27/top-songs-by-artist-on-cd102.5-in-2013/</guid>
      <description>
&lt;div class=&#39;post&#39;&gt;
In a &lt;a href=&#34;http://alandgraf.blogspot.com/2013/08/downloading-and-analyzing-cd1025s.html&#34;&gt;previous post&lt;/a&gt;, I showed you how to scrape playlist data from Columbus, OH alternative rock station &lt;a href=&#34;http://cd1025.com/&#34;&gt;CD102.5&lt;/a&gt;. Since it&#39;s the end of the year and best-of lists are all the fad, I thought I would share the most popular songs and artists of the year, according to this data. In addition to this, I am going to make an interactive graph using &lt;a href=&#34;http://www.rstudio.com/shiny/&#34;&gt;Shiny&lt;/a&gt;, where the user can select an artist and it will graph the most popular songs from that artist.&lt;br /&gt;&lt;br /&gt;First off, I am assuming that you have scraped the appropriate data using the code from the previous post.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;library(lubridate)&lt;br /&gt;library(sqldf)&lt;br /&gt;&lt;br /&gt;playlist=read.csv(&#34;CD101Playlist.csv&#34;,stringsAsFactors=FALSE)&lt;br /&gt;dates=mdy(substring(playlist[,3],nchar(playlist[,3])-9,nchar(playlist[,3])))&lt;br /&gt;times=hm(substring(playlist[,3],1,nchar(playlist[,3])-10))&lt;br /&gt;playlist$Month=ymd(paste(year(dates),month(dates),&#34;1&#34;,sep=&#34;-&#34;))&lt;br /&gt;playlist$Day=dates&lt;br /&gt;playlist$Time=times&lt;br /&gt;playlist=playlist[order(playlist$Day,playlist$Time),]&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Next, I will select just the data from 2013 and find the songs that were played most often. &lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;playlist=subset(playlist,Day&amp;gt;=mdy(&#34;1/1/13&#34;))&lt;br /&gt;playlist$ArtistSong=paste(playlist$Artist,playlist$Song,sep=&#34;-&#34;)&lt;br /&gt;top.songs=sqldf(&#34;Select ArtistSong, Count(ArtistSong) as Num&lt;br /&gt;      From playlist&lt;br /&gt;      Group By ArtistSong&lt;br /&gt;      Order by Num DESC&lt;br /&gt;      Limit 10&#34;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The top 10 songs are the following:&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;                              Artist-Song Number Plays&lt;br /&gt;1  FITZ AND THE TANTRUMS-OUT OF MY LEAGUE 809&lt;br /&gt;2                      ALT J-BREEZEBLOCKS 764&lt;br /&gt;3              COLD WAR KIDS-MIRACLE MILE 759&lt;br /&gt;4                      ATLAS GENIUS-IF SO 750&lt;br /&gt;5                         FOALS-MY NUMBER 687&lt;br /&gt;6                         MS MR-HURRICANE 679&lt;br /&gt;7       THE NEIGHBOURHOOD-SWEATER WEATHER 657&lt;br /&gt;8           CAPITAL CITIES-SAFE AND SOUND 646&lt;br /&gt;9             VAMPIRE WEEKEND-DIANE YOUNG 639&lt;br /&gt;10             THE FEATURES-THIS DISORDER 632&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;I will make a plot similar to the plots made in &lt;a href=&#34;http://alandgraf.blogspot.com/2013/08/when-did-cd1025-book-summerfest-artists.html&#34;&gt;the last post&lt;/a&gt; to show when the top 5 songs were played throughout the year.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;    &lt;br /&gt;plays.per.day=sqldf(&#34;Select Day, Count(Artist) as Num&lt;br /&gt;      From playlist&lt;br /&gt;      Group By Day&lt;br /&gt;      Order by Day&#34;)&lt;br /&gt;&lt;br /&gt;playlist.top.songs=subset(playlist,ArtistSong %in% top.songs$ArtistSong[1:5])&lt;br /&gt;&lt;br /&gt;song.per.day=sqldf(paste0(&#34;Select Day, ArtistSong, Count(ArtistSong) as Num&lt;br /&gt;                          From [playlist.top.songs]&lt;br /&gt;                          Group By Day, ArtistSong&lt;br /&gt;                          Order by Day, ArtistSong&#34;))&lt;br /&gt;dspd=dcast(song.per.day,Day~ArtistSong,sum,value.var=&#34;Num&#34;)&lt;br /&gt;&lt;br /&gt;song.per.day=merge(plays.per.day[,1,drop=FALSE],dspd,all.x=TRUE)&lt;br /&gt;song.per.day[is.na(song.per.day)]=0&lt;br /&gt;&lt;br /&gt;song.per.day=melt(song.per.day,1,variable.name=&#34;ArtistSong&#34;,value.name=&#34;Num&#34;)&lt;br /&gt;song.per.day$Alpha=ifelse(song.per.day$Num&amp;gt;0,1,0)&lt;br /&gt;&lt;br /&gt;library(ggplot2)&lt;br /&gt;ggplot(song.per.day,aes(Day,Num,colour=ArtistSong))+geom_point(aes(alpha=Alpha))+&lt;br /&gt;  geom_smooth(method=&#34;gam&#34;,family=poisson,formula=y~s(x),se=F,size=1)+&lt;br /&gt;  labs(x=&#34;Date&#34;,y=&#34;Plays Per Day&#34;,title=&#34;Top Songs&#34;,colour=NULL)+&lt;br /&gt;  scale_alpha_continuous(guide=FALSE,range=c(0,.5))+theme_bw()&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-JWP3RQkgQeo/Ur4-RG1px7I/AAAAAAAAH-U/JH6gP0Jk6Tc/s1600/TopSongs.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-JWP3RQkgQeo/Ur4-RG1px7I/AAAAAAAAH-U/JH6gP0Jk6Tc/s1600/TopSongs.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;Alt-J was more popular in the beginning of the year and the Foals have been more popular recently.&lt;br /&gt;&lt;br /&gt;I can similarly summarize by artist as well.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;top.artists=sqldf(&#34;Select Artist, Count(Artist) as Num&lt;br /&gt;                From playlist&lt;br /&gt;                Group By Artist&lt;br /&gt;                Order by Num DESC&lt;br /&gt;                Limit 10&#34;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;                    Artist  Num&lt;br /&gt;1                     MUSE 1683&lt;br /&gt;2          VAMPIRE WEEKEND 1504&lt;br /&gt;3        SILVERSUN PICKUPS 1442&lt;br /&gt;4                    FOALS 1439&lt;br /&gt;5                  PHOENIX 1434&lt;br /&gt;6            COLD WAR KIDS 1425&lt;br /&gt;7                JAKE BUGG 1316&lt;br /&gt;8  QUEENS OF THE STONE AGE 1296&lt;br /&gt;9                    ALT J 1233&lt;br /&gt;10     OF MONSTERS AND MEN 1150&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;r&#34;&gt;playlist.top.artists=subset(playlist,Artist %in% top.artists$Artist[1:5])&lt;br /&gt;&lt;br /&gt;artists.per.day=sqldf(paste0(&#34;Select Day, Artist, Count(Artist) as Num&lt;br /&gt;                          From [playlist.top.artists]&lt;br /&gt;                          Group By Day, Artist&lt;br /&gt;                          Order by Day, Artist&#34;))&lt;br /&gt;dspd=dcast(artists.per.day,Day~Artist,sum,value.var=&#34;Num&#34;)&lt;br /&gt;&lt;br /&gt;artists.per.day=merge(plays.per.day[,1,drop=FALSE],dspd,all.x=TRUE)&lt;br /&gt;artists.per.day[is.na(artists.per.day)]=0&lt;br /&gt;&lt;br /&gt;artists.per.day=melt(artists.per.day,1,variable.name=&#34;Artist&#34;,value.name=&#34;Num&#34;)&lt;br /&gt;artists.per.day$Alpha=ifelse(artists.per.day$Num&amp;gt;0,1,0)&lt;br /&gt;&lt;br /&gt;ggplot(artists.per.day,aes(Day,Num,colour=Artist))+geom_point(aes(alpha=Alpha))+&lt;br /&gt;  geom_smooth(method=&#34;gam&#34;,family=poisson,formula=y~s(x),se=F,size=1)+&lt;br /&gt;  labs(x=&#34;Date&#34;,y=&#34;Plays Per Day&#34;,title=&#34;Top Artists&#34;,colour=NULL)+&lt;br /&gt;  scale_alpha_continuous(guide=FALSE,range=c(0,.5))+theme_bw()&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-57hZwciuIug/Ur5AO9l7NWI/AAAAAAAAH-g/Xi2_4e-FwZw/s1600/TopArtist.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-57hZwciuIug/Ur5AO9l7NWI/AAAAAAAAH-g/Xi2_4e-FwZw/s1600/TopArtist.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;The pattern for the artists are not as clear as it is for the songs.&lt;br /&gt;&lt;br /&gt;Finally, I wrote &lt;a href=&#34;https://andland.shinyapps.io/CD1025Playlist2/&#34;&gt;a Shiny interactive app&lt;/a&gt;. They are surprisingly easy to create and if you are thinking about experimenting with it, I suggest you try it. I will leave the code for the app in &lt;a href=&#34;https://gist.github.com/andland/8155783&#34;&gt;a gist&lt;/a&gt;. In &lt;a href=&#34;https://andland.shinyapps.io/CD1025Playlist2/&#34;&gt;the app&lt;/a&gt;, you can enter any artist you want, and it will show you the most popular songs on CD102.5 for that artist. You can also select the number of songs that it plots with the slider.&lt;br /&gt;&lt;br /&gt;For example, even though Muse did not have one of the most popular songs of the year, they were still the band that was played the most. By typing in &#34;MUSE&#34; in the Artist text input, you will get the following output.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-EuKnItqFzCo/Ur5CQELkw0I/AAAAAAAAH-s/Pv4dJwueLQM/s1600/Muse.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-EuKnItqFzCo/Ur5CQELkw0I/AAAAAAAAH-s/Pv4dJwueLQM/s1600/Muse.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;They had two songs that were very popular this year and a few others that were decently popular as well.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://andland.shinyapps.io/CD1025Playlist2/&#34;&gt;Play around&lt;/a&gt; with it and let me know what you think.&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
