<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spectral clustering on Statistically Significant</title>
    <link>/categories/spectral-clustering/</link>
    <description>Recent content in spectral clustering on Statistically Significant</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Feb 2012 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/categories/spectral-clustering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unsupervised Image Segmentation with Spectral Clustering with R</title>
      <link>/2012/02/12/unsupervised-image-segmentation-with-spectral-clustering-with-r/</link>
      <pubDate>Sun, 12 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/02/12/unsupervised-image-segmentation-with-spectral-clustering-with-r/</guid>
      <description>
&lt;div class=&#39;post&#39;&gt;
That title is quite a mouthful. This quarter, I have been reading papers on &lt;a href=&#34;http://en.wikipedia.org/wiki/Spectral_clustering&#34;&gt;Spectral Clustering&lt;/a&gt; for a reading group. The basic goal of clustering is to find groups of data points that are similar to each other. Also, data points in one group should be dissimilar to data in other clusters. This way you can summarize your data by saying there are a few groups to consider instead of all the points. Clustering is an unsupervised learning method in that there are no &#34;true&#34; groups that you are comparing the clusters to.&lt;br /&gt;&lt;br /&gt;There are many ways to do this, two of the most popular are k-means and hierarchical clustering. Spectral clustering is nice because it gives you as much flexibility as you want to define how pairs of data points are similar or dissimilar. K-means only works well for data that are grouped in elliptically shaped, whereas spectral clustering can theoretically work well for any group. For example, the data in &lt;a href=&#34;http://www.ml.uni-saarland.de/code/pSpectralClustering/images/clusters_11b_notitle2.png&#34; target=&#34;_blank&#34;&gt;this image&lt;/a&gt; is easily clustered by spectral, but would not be by k-means. The flexibility of spectral clustering can also be a burden in that there are an infinite ways to group points.&lt;br /&gt;&lt;br /&gt;The basic idea (and all the flexibility) behind spectral clustering is that you define the similarity between any two data points however you want, and put them in a matrix. So if you have 100 data points, you will end up with a 100x100 matrix, where the rth row and cth column is the similarity between the rth data point and the cth data point. You can define &#34;similarity&#34; any way you want. Popular methods are Euclidean distance, a kernel function of the Euclidean distance, or a k nearest neighbors approach.&lt;br /&gt;&lt;br /&gt;Once you have the similarity matrix, you need to create a normalized/unnormalized &lt;a href=&#34;http://en.wikipedia.org/wiki/Laplacian_matrix&#34;&gt;Laplacian&lt;/a&gt; matrix, then calculate the eigenvectors and eigenvalues of the the Laplacian. Finally, use the k-means algorithm on the eigenvalues corresponding to the k smallest eigenvectors. This will give you k clusters (something else you need to specify).&lt;br /&gt;&lt;br /&gt;The other day, someone in my office was working a project of &lt;a href=&#34;http://en.wikipedia.org/wiki/Image_segmentation&#34;&gt;Image Segmentation&lt;/a&gt; (a topic I know nothing about) for a machine learning class. I thought this would be a perfect application for spectral clustering because you can define similarity of pixels in terms of both the contrast of the pixel as well as the proximity to nearby pixels. I downloaded a few pictures from the&lt;span id=&#34;goog_358016683&#34;&gt;&lt;/span&gt;&lt;span id=&#34;goog_358016684&#34;&gt;&lt;/span&gt; &lt;a href=&#34;http://www.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/&#34;&gt;Berkeley Segmentation Dataset Benchmark&lt;/a&gt; website.&lt;br /&gt;&lt;br /&gt;One thing I quickly found was that even these moderately sized pictures were too big to create a similarity matrix for in R. A typical image is 481x321=154401 pixels. So a similarity matrix between all the pixels would be 154401x154401=23 billion elements. R only allows 2^31-1=2.1 billion elements in a matrix. Even if I could create the matrix, it would take forever to calculate the eigenvectors and eigenvalues. [Note: Some people from my department actually tackled &lt;a href=&#34;http://www.stat.osu.edu/~taoshi/research/papers/2011_Schuetter_Shi_JCGS.pdf&#34; target=&#34;_blank&#34;&gt;this exact problem&lt;/a&gt; using sampling methods.]&lt;br /&gt;&lt;br /&gt;So I had to reduce the size of the image. For this I just created an image of a factor of the original dimension (about 10 to 20 times smaller), and averaged the contrast of all the points that were collapsed. I also experimented with smoothing the image first and then doing the averaging In some cases it helped in some it hurt, I think.&lt;br /&gt;&lt;br /&gt;For example here is an original picture.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://www.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/BSDS300/html/images/plain/normal/gray/86016.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://www.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/BSDS300/html/images/plain/normal/gray/86016.jpg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Then I smoothed using the image.smooth function of the fields package.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-Rd4S9Z1Y5IE/Tzf9PWxlGII/AAAAAAAAF6M/xBUzV_EMDrE/s1600/smooth.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://lh3.ggpht.com/-Rd4S9Z1Y5IE/Tzf9PWxlGII/AAAAAAAAF6M/xBUzV_EMDrE/s1600/smooth.jpeg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;Then I reduced the dimension by a factor of 10 and averaged the original pixels. The resulting image is below. You can see there is a decent loss of information in the averaging.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-tzIV9TQYHVI/Tzf9cKaR9YI/AAAAAAAAF6U/2sne_VgLUJQ/s1600/averaged.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://lh3.ggpht.com/-tzIV9TQYHVI/Tzf9cKaR9YI/AAAAAAAAF6U/2sne_VgLUJQ/s1600/averaged.jpeg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Finally, for the similarity, I only considered pixels that were within 3 horizontally or vertically to be similar (otherwise 0). Also, for those within 3, I used a Gaussian kernel of the difference in contrast with variance equal to 0.01. I chose this number because the variance in the data was about 0.01. Varying both of these parameters wildly affected quality of the results. I also tried using a k nearest neighbors similarity and I did not get any good results. Hence, you can see both the positive and negative of the flexibility.&lt;br /&gt;&lt;br /&gt;Anyway, here are the two clusters (white and black) using the unnormalized Laplacian.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-dtUccbD9WeM/TzgAJH51ZAI/AAAAAAAAF6c/eUL8YFLOETE/s1600/clusters.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://lh3.ggpht.com/-dtUccbD9WeM/TzgAJH51ZAI/AAAAAAAAF6c/eUL8YFLOETE/s1600/clusters.jpeg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;It looks very good and encouraging for future problems. As stated before, however, I am not sure how to determine the parameters for a generic problem.&lt;br /&gt;&lt;br /&gt;Overlaying the cluster on the original image, you can see the two segments of the image clearly. You can also see the loss in fidelity due to reducing the size of the image.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-FqY4mvTF2Yo/TzgKwX9ZlBI/AAAAAAAAF68/_WpfIetZVmc/s1600/overlay1b.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://lh3.ggpht.com/-FqY4mvTF2Yo/TzgKwX9ZlBI/AAAAAAAAF68/_WpfIetZVmc/s1600/overlay1b.jpeg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-LDWLf0qEKCo/TzgAJciHcaI/AAAAAAAAF6k/c4veitNzH4A/s1600/overlay.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;Here are a couple of other examples that worked well. With the airplane one, in particular, you can see that the clustering was able to identify an unusual shape. I was not able to get it to work well with more than two clusters, although I only tried one image that was not that easy.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-k-7m1FTg_fI/TzgKx9lj0XI/AAAAAAAAF7E/LDjpO3w1JBg/s1600/overlay3b.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://lh3.ggpht.com/-k-7m1FTg_fI/TzgKx9lj0XI/AAAAAAAAF7E/LDjpO3w1JBg/s1600/overlay3b.jpeg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-EVSnrPb3CaA/TzgD21GoJoI/AAAAAAAAF60/y6NlonQ8Nw0/s1600/overlay3.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-36TaE1FBMGg/TzgD2VmAOFI/AAAAAAAAF6s/W0SsqyG-J_M/s1600/overlay2.jpeg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://lh3.ggpht.com/-36TaE1FBMGg/TzgD2VmAOFI/AAAAAAAAF6s/W0SsqyG-J_M/s1600/overlay2.jpeg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;For posterity, here is the code I used.&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Import the image &lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;library(jpeg)&lt;br /&gt;# http://www.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/BSDS300/html/images/plain/normal/gray/86016.jpg&lt;br /&gt;rawimg=readJPEG(&#34;segment.jpeg&#34;)&lt;br /&gt;rawimg=t(rawimg)&lt;br /&gt;rawimg=rawimg[,ncol(rawimg):1]&lt;br /&gt;image(rawimg,col = grey((0:12)/12))&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Smooth the image&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;library(fields)&lt;br /&gt;smoothimg=image.smooth(rawimg,theta=2)&lt;br /&gt;image(smoothimg,col = grey((0:12)/12))&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Reduce Size of Image&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;olddim=dim(rawimg)&lt;br /&gt;newdim=c(round(olddim/10))&lt;br /&gt;prod(newdim)&amp;gt;2^31&lt;br /&gt;img=matrix(NA,newdim[1],newdim[2])&lt;br /&gt;for (r in 1:newdim[1]) {&lt;br /&gt;&amp;nbsp; centerx=(r-1)/newdim[1]*olddim[1]+1&lt;br /&gt;&amp;nbsp; lowerx=max(1,round(centerx-olddim[1]/newdim[1]/2,0))&lt;br /&gt;&amp;nbsp; upperx=min(olddim[1],round(centerx+olddim[1]/newdim[1]/2,0))&lt;br /&gt;&amp;nbsp; for (c in 1:newdim[2]) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; centery=(c-1)/newdim[2]*olddim[2]+1&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lowery=max(1,round(centery-olddim[2]/newdim[2]/2,0))&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; uppery=min(olddim[2],round(centery+olddim[2]/newdim[2]/2,0))&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; img[r,c]=mean(smoothimg$z[lowerx:upperx,lowery:uppery])&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;image(img,col = grey((0:12)/12))&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Convert matrix to vector&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;imgvec=matrix(NA,prod(dim(img)),3)&lt;br /&gt;counter=1&lt;br /&gt;for (r in 1:nrow(img)) {&lt;br /&gt;&amp;nbsp; for (c in 1:ncol(img)) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; imgvec[counter,1]=r&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; imgvec[counter,2]=c&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; imgvec[counter,3]=img[r,c]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; counter=counter+1&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Similarity Matrix&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;pixdiff=2&lt;br /&gt;sigma2=.01 #&lt;/span&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;var(imgvec[,3])&lt;/span&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;&lt;br /&gt;simmatrix=matrix(0,nrow(imgvec),nrow(imgvec))&lt;br /&gt;for(r in 1:nrow(imgvec)) {&lt;br /&gt;&amp;nbsp; cat(r,&#34;out of&#34;,nrow(imgvec),&#34;\n&#34;)&lt;br /&gt;&amp;nbsp; simmatrix[r,]=ifelse(abs(imgvec[r,1]-imgvec[,1])&amp;lt;=pixdiff &amp;amp; abs(imgvec[r,2]-imgvec[,2])&amp;lt;=pixdiff,exp(-(imgvec[r,3]-imgvec[,3])^2/sigma2),0)&lt;br /&gt;}&lt;br /&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Weighted and Unweighted Laplacian&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;D=diag(rowSums(simmatrix))&lt;br /&gt;Dinv=diag(1/rowSums(simmatrix))&lt;br /&gt;L=diag(rep(1,nrow(simmatrix)))-Dinv %*% simmatrix&lt;br /&gt;U=D-simmatrix&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Eigen and k-means&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;evL=eigen(L,symmetric=TRUE)&lt;br /&gt;evU=eigen(U,symmetric=TRUE)&lt;br /&gt;&lt;br /&gt;kmL=kmeans(evL$vectors[,(ncol(simmatrix)-1):(ncol(simmatrix)-0)],centers=2,nstart=5)&lt;br /&gt;segmatL=matrix(kmL$cluster-1,newdim[1],newdim[2],byrow=T)&lt;br /&gt;if(max(segmatL) &amp;amp; sum(segmatL==1)&amp;lt;sum(segmatL==0)) {segmatL=abs(segmatL-1)}&lt;br /&gt;&lt;br /&gt;kmU=kmeans(evU$vectors[,(ncol(simmatrix)-1):(ncol(simmatrix)-0)],centers=2,nstart=5)&lt;br /&gt;segmatU=matrix(kmU$cluster-1,newdim[1],newdim[2],byrow=T)&lt;br /&gt;if(max(segmatU) &amp;amp;sum(segmatU==1)&amp;lt;sum(segmatU==0)) {segmatU=abs(segmatU-1)}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Plotting the clusters&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;image(segmatL, col=grey((0:15)/15))&lt;br /&gt;image(segmatU, col=grey((0:12)/12))&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;# Overlaying the original and the clusters&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;############&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;image(seq(0,1,length.out=olddim[1]),seq(0,1,length.out=olddim[2]),rawimg,col = grey((0:12)/12),xlim=c(-.1,1.1),ylim=c(-.1,1.1),xlab=&#34;&#34;,ylab=&#34;&#34;)&lt;br /&gt;&lt;br /&gt;segmat=segmatU&lt;br /&gt;linecol=2&lt;br /&gt;linew=3&lt;br /&gt;for(r in 2:newdim[1]) {&lt;br /&gt;&amp;nbsp; for (c in 2:newdim[2]) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(abs(segmat[r-1,c]-segmat[r,c])&amp;gt;0) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xloc=(r-1)/(newdim[1])&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ymin=(c-1)/(newdim[2])&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ymax=(c-0)/(newdim[2])&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; segments(xloc,ymin,xloc,ymax,col=linecol,lwd=linew)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(abs(segmat[r,c-1]-segmat[r,c])&amp;gt;0) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yloc=(c-1)/(newdim[2])&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xmin=(r-1)/(newdim[1])&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xmax=(r-0)/(newdim[1])&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; segments(xmin,yloc,xmax,yloc,col=linecol,lwd=linew)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;}&lt;/span&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
