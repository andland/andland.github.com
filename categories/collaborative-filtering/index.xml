<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>collaborative filtering on Statistically Significant</title>
    <link>/categories/collaborative-filtering/</link>
    <description>Recent content in collaborative filtering on Statistically Significant</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Jan 2013 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/categories/collaborative-filtering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Restricted Boltzmann Machines in R</title>
      <link>/2013/01/14/restricted-boltzmann-machines-in-r/</link>
      <pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/01/14/restricted-boltzmann-machines-in-r/</guid>
      <description>
&lt;div class=&#39;post&#39;&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Boltzmann_machine#Restricted_Boltzmann_machine&#34;&gt;Restricted Boltzmann Machines&lt;/a&gt; (RBMs) are an unsupervised learning method (like principal components).  An RBM is a probabilistic and undirected graphical model. They are  becoming more popular in machine learning due to recent success in  training them with &lt;a href=&#34;http://deeplearning.net/tutorial/rbm.html#contrastive-divergence-cd-k&#34;&gt;contrastive divergence&lt;/a&gt;. They have been proven useful in collaborative filtering, being one of the most successful methods in the Netflix challenge (&lt;a href=&#34;http://www.machinelearning.org/proceedings/icml2007/papers/407.pdf&#34;&gt;paper&lt;/a&gt;). Furthermore, they have been tantamount to training &lt;a href=&#34;http://www.nytimes.com/2012/11/24/science/scientists-see-advances-in-deep-learning-a-part-of-artificial-intelligence.html&#34;&gt;deep learning&lt;/a&gt; models, which appear to be the best current models for image and digit recognition.&lt;br /&gt;&lt;br /&gt;I do not want to go into too much detail, but I would like to give a high level overview of RBMs. &lt;a href=&#34;http://blog.echen.me/2011/07/18/introduction-to-restricted-boltzmann-machines/&#34;&gt;Edwin Chen&lt;/a&gt; has an introduction that is much better. The usual version of an RBM is  a probabilistic model for binary vectors. An image can be represented  as a binary vector if each pixel that is dark enough is represented as a  1 and the non-dark pixels are 0&#39;s. In addition to the visible binary  vector, it is assumed that there is a hidden binary vector, and each  element of the hidden unit is connected to each unit of the visible unit  by symmetric weights. The weights are represented by the matrix &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-1-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-1&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 1.042em;&#34;&gt;&lt;span style=&#34;clip: rect(1.775em, 1000em, 2.897em, -0.574em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-2&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-3&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.104em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 1.013em; overflow: hidden; vertical-align: -0.11em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;, where the &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-2-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-4&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 1.944em;&#34;&gt;&lt;span style=&#34;clip: rect(1.719em, 1000em, 3.218em, -0.604em); left: 0em; position: absolute; top: -2.806em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-5&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-6&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-7&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-8&#34; style=&#34;padding-left: 0.167em;&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 1.186em;&#34;&gt;&lt;span style=&#34;clip: rect(1.797em, 1000em, 3.079em, -0.637em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-9&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.417em; position: absolute; top: -2.569em;&#34;&gt;&lt;span class=&#34;texatom&#34; id=&#34;MathJax-Span-10&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-11&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-12&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-13&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.806em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 1.466em; overflow: hidden; vertical-align: -0.328em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt; component is the weight between hidden unit &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-3-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-14&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 0.347em;&#34;&gt;&lt;span style=&#34;clip: rect(1.797em, 1000em, 2.886em, -0.604em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-15&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-16&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 0.973em; overflow: hidden; vertical-align: -0.097em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt; and visible unit &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-4-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-17&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 0.417em;&#34;&gt;&lt;span style=&#34;clip: rect(1.797em, 1000em, 3.079em, -0.637em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-18&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-19&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 1.205em; overflow: hidden; vertical-align: -0.328em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;.  It is important that there are no connections between hidden units or  between visible units. The probability that visible unit &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-5-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-20&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 0.417em;&#34;&gt;&lt;span style=&#34;clip: rect(1.797em, 1000em, 3.079em, -0.637em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-21&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-22&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 1.205em; overflow: hidden; vertical-align: -0.328em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt; is 1 is the inverse logistic function of the sum of the weights connected to visible unit &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-6-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-23&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 0.417em;&#34;&gt;&lt;span style=&#34;clip: rect(1.797em, 1000em, 3.079em, -0.637em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-24&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-25&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 1.205em; overflow: hidden; vertical-align: -0.328em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;, in which the hidden units are 1. In math notation (where &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-7-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-26&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 0.556em;&#34;&gt;&lt;span style=&#34;clip: rect(2.027em, 1000em, 2.886em, -0.594em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-27&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-28&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;σ&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.001em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 0.697em; overflow: hidden; vertical-align: -0.097em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt; is the inverse logistic, or sigmoid, function):&lt;br /&gt;&lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&#34;MathJax_Display&#34; role=&#34;textbox&#34; style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-8-Frame&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-29&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 14.306em;&#34;&gt;&lt;span style=&#34;clip: rect(1.647em, 1000em, 4.206em, -0.592em); left: 0em; position: absolute; top: -2.806em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-30&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-31&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;P&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.109em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-32&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-33&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-34&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 0.839em;&#34;&gt;&lt;span style=&#34;clip: rect(2.015em, 1000em, 2.886em, -0.604em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-35&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.486em; position: absolute; top: -2.031em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-36&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-37&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.278em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-38&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.278em;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;texatom&#34; id=&#34;MathJax-Span-39&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-40&#34;&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-41&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-42&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-43&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-44&#34; style=&#34;font-family: MathJax_Math; font-style: italic; padding-left: 0.167em;&#34;&gt;W&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.104em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-45&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-46&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.278em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-47&#34; style=&#34;font-family: MathJax_Math; font-style: italic; padding-left: 0.278em;&#34;&gt;σ&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.001em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-48&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;munderover&#34; id=&#34;MathJax-Span-49&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 1.458em;&#34;&gt;&lt;span style=&#34;clip: rect(2.758em, 1000em, 4.575em, -0.57em); left: 0em; position: absolute; top: -3.917em;&#34;&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-50&#34; style=&#34;font-family: MathJax_Size2; vertical-align: 0em;&#34;&gt;∑&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 3.917em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;clip: rect(1.505em, 1000em, 2.497em, -0.61em); left: 0.59em; position: absolute; top: -1.096em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-51&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-52&#34; style=&#34;padding-left: 0.167em;&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 0.908em;&#34;&gt;&lt;span style=&#34;clip: rect(1.764em, 1000em, 2.886em, -0.577em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-53&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.556em; position: absolute; top: -2.031em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-54&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-55&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 1.777em;&#34;&gt;&lt;span style=&#34;clip: rect(1.775em, 1000em, 2.897em, -0.574em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-56&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.104em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.938em; position: absolute; top: -2.169em;&#34;&gt;&lt;span class=&#34;texatom&#34; id=&#34;MathJax-Span-57&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-58&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-59&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-60&#34; style=&#34;font-family: MathJax_Main; font-size: 70.7%;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-61&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.319em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-62&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-63&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.806em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 2.737em; overflow: hidden; vertical-align: -1.514em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;The weights are symmetric, so&lt;br /&gt;&lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&#34;MathJax_Display&#34; role=&#34;textbox&#34; style=&#34;text-align: center;&#34;&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-9-Frame&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-64&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 14.167em;&#34;&gt;&lt;span style=&#34;clip: rect(1.647em, 1000em, 4.342em, -0.592em); left: 0em; position: absolute; top: -2.806em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-65&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-66&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;P&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.109em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-67&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-68&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-69&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 0.908em;&#34;&gt;&lt;span style=&#34;clip: rect(1.764em, 1000em, 2.886em, -0.577em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-70&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.556em; position: absolute; top: -2.031em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-71&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-72&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.278em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-73&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.278em;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;texatom&#34; id=&#34;MathJax-Span-74&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-75&#34;&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-76&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-77&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-78&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-79&#34; style=&#34;font-family: MathJax_Math; font-style: italic; padding-left: 0.167em;&#34;&gt;W&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.104em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-80&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-81&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.278em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-82&#34; style=&#34;font-family: MathJax_Math; font-style: italic; padding-left: 0.278em;&#34;&gt;σ&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.001em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-83&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;munderover&#34; id=&#34;MathJax-Span-84&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 1.458em;&#34;&gt;&lt;span style=&#34;clip: rect(2.758em, 1000em, 4.575em, -0.57em); left: 0em; position: absolute; top: -3.917em;&#34;&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-85&#34; style=&#34;font-family: MathJax_Size2; vertical-align: 0em;&#34;&gt;∑&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 3.917em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;clip: rect(1.505em, 1000em, 2.633em, -0.633em); left: 0.59em; position: absolute; top: -1.096em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-86&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-87&#34; style=&#34;padding-left: 0.167em;&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 0.839em;&#34;&gt;&lt;span style=&#34;clip: rect(2.015em, 1000em, 2.886em, -0.604em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-88&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.486em; position: absolute; top: -2.031em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-89&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.181em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msubsup&#34; id=&#34;MathJax-Span-90&#34;&gt;&lt;span style=&#34;display: inline-block; height: 0px; position: relative; width: 1.777em;&#34;&gt;&lt;span style=&#34;clip: rect(1.775em, 1000em, 2.897em, -0.574em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-91&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.104em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;left: 0.938em; position: absolute; top: -2.169em;&#34;&gt;&lt;span class=&#34;texatom&#34; id=&#34;MathJax-Span-92&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-93&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-94&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-95&#34; style=&#34;font-family: MathJax_Main; font-size: 70.7%;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-96&#34; style=&#34;font-family: MathJax_Math; font-size: 70.7%; font-style: italic;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.319em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-97&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-98&#34; style=&#34;font-family: MathJax_Main;&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.806em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 2.901em; overflow: hidden; vertical-align: -1.677em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;&lt;/div&gt;As you can see, the model is defined by its conditional probabilities. The task is to find the weight matrix &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-10-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-99&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 1.042em;&#34;&gt;&lt;span style=&#34;clip: rect(1.775em, 1000em, 2.897em, -0.574em); left: 0em; position: absolute; top: -2.667em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-100&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-101&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; height: 1px; overflow: hidden; width: 0.104em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.667em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 1.013em; overflow: hidden; vertical-align: -0.11em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt; that best explains the visible data for a given number of hidden units.&lt;br /&gt;&lt;br /&gt;I have been taking Geoff Hinton&#39;s &lt;a href=&#34;https://class.coursera.org/neuralnets-2012-001/&#34;&gt;coursera course&lt;/a&gt; on neural networks, which I would recommend to anyone interested. One  of the programming assignments was to fill in code to write an RBM in  Matlab/Octave. I have since tried to find a version for R, but have not  had any luck, so I decided to translate the code myself. Below is the  code to calculate the weight matrix. It is fairly simple and I only use  contrastive divergence 1. The input data is &lt;span class=&#34;MathJax_Preview&#34;&gt;&lt;/span&gt;&lt;span class=&#34;MathJax&#34; id=&#34;MathJax-Element-11-Frame&#34; role=&#34;textbox&#34;&gt;&lt;nobr&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-102&#34;&gt;&lt;span style=&#34;display: inline-block; font-size: 120%; height: 0px; position: relative; width: 2.292em;&#34;&gt;&lt;span style=&#34;clip: rect(2.106em, 1000em, 3.208em, -0.664em); left: 0em; position: absolute; top: -2.806em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-103&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-104&#34; style=&#34;font-family: MathJax_Math; font-style: italic;&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-105&#34; style=&#34;font-family: MathJax_Main; padding-left: 0.222em;&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-106&#34; style=&#34;font-family: MathJax_Math; font-style: italic; padding-left: 0.222em;&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; height: 2.806em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;border-left: 0em solid; display: inline-block; height: 0.989em; overflow: hidden; vertical-align: -0.316em; width: 0px;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt; instead of the usual transpose.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;overflow: auto;&#34;&gt;&lt;div class=&#34;geshifilter&#34;&gt;&lt;pre class=&#34;r geshifilter-R&#34; style=&#34;font-family: monospace;&#34;&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;# rbm_w is a matrix of size &amp;lt;number of hidden units&amp;gt; by &amp;lt;number of visible units&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;# visible_state is matrix of size &amp;lt;number of visible units&amp;gt; by &amp;lt;number of data cases&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;# hidden_state is a binary matrix of size &amp;lt;number of hidden units&amp;gt; by &amp;lt;number of data cases&amp;gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;visible_state_to_hidden_probabilities &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; visible_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;/&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;+&lt;a href=&#34;http://inside-r.org/r-doc/base/exp&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;exp&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;-rbm_w %*% visible_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;hidden_state_to_visible_probabilities &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; hidden_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;/&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;+&lt;a href=&#34;http://inside-r.org/r-doc/base/exp&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;exp&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;-&lt;a href=&#34;http://inside-r.org/r-doc/base/t&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;t&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; %*% hidden_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;configuration_goodness &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; visible_state&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; hidden_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;  out=&lt;span style=&#34;color: #cc66cc;&#34;&gt;0&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;:&lt;a href=&#34;http://inside-r.org/r-doc/base/dim&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;dim&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;    out=out+&lt;a href=&#34;http://inside-r.org/r-doc/base/t&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;t&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;hidden_state&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;i&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; %*% rbm_w %*% visible_state&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;i&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;  out/dim&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;configuration_goodness_gradient &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_state&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; hidden_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;  hidden_state %*% &lt;a href=&#34;http://inside-r.org/r-doc/base/t&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;t&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;/dim&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_state&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;sample_bernoulli &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;mat&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;  dims=&lt;a href=&#34;http://inside-r.org/r-doc/base/dim&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;dim&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;mat&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;a href=&#34;http://inside-r.org/r-doc/base/matrix&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;matrix&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/stats/rbinom&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;rbinom&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/prod&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;prod&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;dims&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;size=&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/packages/cran/prob&#34;&gt;prob&lt;/a&gt;=&lt;a href=&#34;http://inside-r.org/r-doc/base/c&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;c&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;mat&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;dims&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;dims&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;cd1 &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; visible_data&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;  visible_data = sample_bernoulli&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_data&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  H0=sample_bernoulli&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_state_to_hidden_probabilities&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; visible_data&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  vh0=configuration_goodness_gradient&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;visible_data&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; H0&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  V1=sample_bernoulli&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;hidden_state_to_visible_probabilities&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; H0&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  H1=visible_state_to_hidden_probabilities&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;rbm_w&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; V1&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  vh1=configuration_goodness_gradient&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;V1&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; H1&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  vh0-vh1&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;rbm &amp;lt;- &lt;a href=&#34;http://inside-r.org/r-doc/base/function&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;function&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;num_hidden&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; training_data&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; learning_rate&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; n_iterations&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; mini_batch_size=&lt;span style=&#34;color: #cc66cc;&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; momentum=&lt;span style=&#34;color: #cc66cc;&#34;&gt;0.9&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; quiet=&lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;FALSE&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#   This trains a model that&#39;s defined by a single matrix of weights.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#   &amp;lt;num_hidden&amp;gt; is the number of hidden units&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#   cd1 is a function that takes parameters &amp;lt;model&amp;gt; and &amp;lt;data&amp;gt; and returns the gradient (or approximate gradient in the case of CD-1) of the function that we&#39;re maximizing. Note the contrast with the loss function that we saw in PA3, which we were minimizing. The returned gradient is an array of the same shape as the provided &amp;lt;model&amp;gt; parameter.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#   This uses mini-batches no weight decay and no early stopping.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#   This returns the matrix of weights of the trained model.&lt;/span&gt;&lt;br /&gt;  n=&lt;a href=&#34;http://inside-r.org/r-doc/base/dim&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;dim&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;training_data&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;  p=&lt;a href=&#34;http://inside-r.org/r-doc/base/dim&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;dim&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;training_data&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;n %% mini_batch_size != &lt;span style=&#34;color: #cc66cc;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;a href=&#34;http://inside-r.org/r-doc/base/stop&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;stop&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: blue;&#34;&gt;&#34;the number of test cases must be divisable by the mini_batch_size&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;  model = &lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/matrix&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;matrix&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/stats/runif&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;runif&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;num_hidden*p&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;num_hidden&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;p&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; * &lt;span style=&#34;color: #cc66cc;&#34;&gt;2&lt;/span&gt; - &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; * &lt;span style=&#34;color: #cc66cc;&#34;&gt;0.1&lt;/span&gt;&lt;br /&gt;  momentum_speed = &lt;a href=&#34;http://inside-r.org/r-doc/base/matrix&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;matrix&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cc66cc;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;num_hidden&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;p&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;  start_of_next_mini_batch = &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;iteration_number &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;:n_iterations&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;!quiet&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;{&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/cat&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;cat&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: blue;&#34;&gt;&#34;Iter&#34;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;iteration_number&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: blue;&#34;&gt;&#34;&lt;span style=&#34;color: #000099; font-weight: bold;&#34;&gt;\n&lt;/span&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;    mini_batch = training_data&lt;span style=&#34;color: #009900;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; start_of_next_mini_batch:&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;start_of_next_mini_batch + mini_batch_size - &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;    start_of_next_mini_batch = &lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;start_of_next_mini_batch + mini_batch_size&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt; %% n&lt;br /&gt;    gradient = cd1&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;model&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; mini_batch&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    momentum_speed = momentum * momentum_speed + gradient&lt;br /&gt;    model = model + momentum_speed * learning_rate&lt;br /&gt;  &lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;a href=&#34;http://inside-r.org/r-doc/base/return&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;return&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;model&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: #009900;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#34;http://www.inside-r.org/pretty-r&#34; title=&#34;Created by Pretty R at inside-R.org&#34;&gt;Created by Pretty R at inside-R.org&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I loaded the hand written digit data that was given in the class. To train the RBM, use the syntax below.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;overflow: auto;&#34;&gt;&lt;div class=&#34;geshifilter&#34;&gt;&lt;pre class=&#34;r geshifilter-R&#34; style=&#34;font-family: monospace;&#34;&gt;&lt;a href=&#34;http://inside-r.org/r-doc/stats/weights&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;weights&lt;/span&gt;&lt;/a&gt;=rbm&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;num_hidden=&lt;span style=&#34;color: #cc66cc;&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; training_data=train&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; learning_rate=&lt;span style=&#34;color: #cc66cc;&#34;&gt;.09&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; n_iterations=&lt;span style=&#34;color: #cc66cc;&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            mini_batch_size=&lt;span style=&#34;color: #cc66cc;&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt; momentum=&lt;span style=&#34;color: #cc66cc;&#34;&gt;0.9&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#34;http://www.inside-r.org/pretty-r&#34; title=&#34;Created by Pretty R at inside-R.org&#34;&gt;Created by Pretty R at inside-R.org&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;After training the weights, I can visualize them. Below is a plot of  strength of the weights going to each pixel. Each facet displays the  weights going to/coming from one of the hidden units. I trained 30 units  so that it would be easy to show them all on one plot. You can see that  most of the hidden units correspond strongly to one digit or another. I  think this means it is finding the joint structure of all of the pixels  and that pixels representing those numbers are darkened together often.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;overflow: auto;&#34;&gt;&lt;div class=&#34;geshifilter&#34;&gt;&lt;pre class=&#34;r geshifilter-R&#34; style=&#34;font-family: monospace;&#34;&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/library&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;library&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/packages/cran/ggplot2&#34;&gt;ggplot2&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/library&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;library&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;reshape2&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;mw=melt&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/stats/weights&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;weights&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; mw$Var3=&lt;a href=&#34;http://inside-r.org/r-doc/base/floor&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;floor&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;mw$Var2-&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;/&lt;span style=&#34;color: #cc66cc;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; mw$Var2=&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;mw$Var2-&lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;%%16 + &lt;span style=&#34;color: #cc66cc;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt; mw$Var3=&lt;span style=&#34;color: #cc66cc;&#34;&gt;17&lt;/span&gt;-mw$Var3&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;a href=&#34;http://inside-r.org/packages/cran/ggplot&#34;&gt;ggplot&lt;/a&gt;&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/utils/data&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;data&lt;/span&gt;&lt;/a&gt;=mw&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+geom_tile&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;aes&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;Var2&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;Var3&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;fill=value&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+facet_wrap&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;~Var1&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/nrow&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;nrow&lt;/span&gt;&lt;/a&gt;=&lt;span style=&#34;color: #cc66cc;&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+&lt;br /&gt;  scale_fill_continuous&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;low=&lt;span style=&#34;color: blue;&#34;&gt;&#39;white&#39;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;high=&lt;span style=&#34;color: blue;&#34;&gt;&#39;black&#39;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+coord_equal&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+&lt;br /&gt;  labs&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;x=&lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;y=&lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;,&lt;/span&gt;&lt;a href=&#34;http://inside-r.org/r-doc/graphics/title&#34;&gt;&lt;span style=&#34;color: #003399; font-weight: bold;&#34;&gt;title&lt;/span&gt;&lt;/a&gt;=&lt;span style=&#34;color: blue;&#34;&gt;&#34;Visualization of Weights&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;+&lt;br /&gt;  theme&lt;span style=&#34;color: #009900;&#34;&gt;(&lt;/span&gt;legend.position=&lt;span style=&#34;color: blue;&#34;&gt;&#34;none&#34;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#34;http://www.inside-r.org/pretty-r&#34; title=&#34;Created by Pretty R at inside-R.org&#34;&gt;Created by Pretty R at inside-R.org&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-ZSuYvhPTiI4/UPAlFt8sYJI/AAAAAAAAHpo/DcATXHnKMPU/s1600/unnamed-chunk-4.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-ZSuYvhPTiI4/UPAlFt8sYJI/AAAAAAAAHpo/DcATXHnKMPU/s1600/unnamed-chunk-4.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Andrew Landgraf&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
There are no biases in this implementation. You could make v_1=1, but there still wouldn&amp;#39;t be biases in the hidden units.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;sidharth&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
where are the biases ? have you included them in the weights ?&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Andrew Landgraf&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
The weights are randomly initialized, so any 2 runs will give different results. However, if your figure looks similar to mine, in that it looks like the weights represent numbers, I would say it is working correctly.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Xiaolin Gui&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Thank you for sharing your code.I found the output figure had different with yours when I  do the experiment. I have load the MNIST image data successfully. And the data&amp;#39;s format is 784 ×60000.  The pixels have been binarization. &amp;gt;= 127——&amp;gt;1.&lt;br /&gt;I hope you give me some advice.&lt;br /&gt;email:guixiaolinde@gmail.com &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Anonymous&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
I have managed to import the training data (from the Coursera website) into R:&lt;br /&gt;&lt;br /&gt;library(R.matlab)&lt;br /&gt;dat = readMat(&amp;quot;data_set.mat&amp;quot;)&lt;br /&gt;......&lt;br /&gt;weights=rbm(num_hidden=30, training_data= dat$data[,,1]$training[[1]], learning_rate=.09, n_iterations=5000,&lt;br /&gt;            mini_batch_size=100, momentum=0.9)&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Kent Johnson&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
R code for assignment 4 was posted here:&lt;br /&gt;https://class.coursera.org/neuralnets-2012-001/forum/thread?thread_id=87&amp;amp;post_id=5105&lt;br /&gt;I used it as the basis for a work project.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Zachary Mayer&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
I believe there&amp;#39;s also a kaggle competition using that data right now: http://www.kaggle.com/c/digit-recognizer&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Andrew&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
I don&amp;#39;t want to post it here because of possible copyright violations, but you can download it in Octave format from the Coursera site (in programming assignment 4) or you can find it at this webpage: http://yann.lecun.com/exdb/mnist/&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Anonymous&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Do you have a sample of training data?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Matrix Factorization Model for Hitter/Pitcher Matchups</title>
      <link>/2012/08/10/a-matrix-factorization-model-for-hitter/pitcher-matchups/</link>
      <pubDate>Fri, 10 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/08/10/a-matrix-factorization-model-for-hitter/pitcher-matchups/</guid>
      <description>
&lt;div class=&#39;post&#39;&gt;
&lt;h3&gt;Introduction &lt;/h3&gt;Matrix factorization has been proven to be one of the best ways to do collaborative filtering. The most common example of collaborative filtering is to predict how much a viewer will like a movie. The power of matrix factorization was a key development of the Netflix Prize (see &lt;a href=&#34;http://www2.research.att.com/%7Evolinsky/papers/ieeecomputer.pdf&#34;&gt;http://www2.research.att.com/~volinsky/papers/ieeecomputer.pdf&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;Using the movie rating example, the idea is that there are some underlying features of the movie and underlying attributes of the user that interact to determine if the user will like the movie. So if the user typically likes comedies, and the movie is a comedy, these will interact and the user will like the movie. The best part is that in order to determine these features, we do not need to use any background information on the movie or the user. For example, we don&#39;t need someone to manually code whether each movie is a comedy or not. Matrix factorization just needs a set of historical ratings, which is usually easily available.&lt;br /&gt;&lt;br /&gt;Using only a few features, we could probably interpret what each of them mean (comedy, drama, foreign, blockbuster, ...). They found in the Netflix competition that increasing the number of underlying features that make up a user and a movie almost always improved accuracy (they used up to 1500 features). With that many features, they can no longer be interpreted as in the example.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Baseball Data&lt;/h3&gt;I find this method interesting, and I wanted to apply it to some real data. One idea I had is predicting whether the result of a pitcher-batter match-up in baseball. Usually in baseball, the analysts cry &#34;small sample size&#34; if someone reports that a pitcher is particularly good/bad versus a batter. In order to get an accurate assessment that does not suffer from random variation, we need 100 or more at bats, which usually takes a few years at least.&lt;br /&gt;&lt;br /&gt;It seems that matrix factorization might be a natural fit, because we are not predicting the specific interaction of the batter/pitcher. Instead, we are estimating some underlying features of the batter and the pitcher. We can estimate these features from all of the match-ups that the batter and pitcher have been in -- not just the ones against each other.&lt;br /&gt;&lt;br /&gt;One example of a feature that I hoped to extract is batter and pitcher handedness. It is well known that batters fair poorly against pitchers of the same handedness and do better against pitchers of the opposite handedness. Other examples might relate to whether the pitcher can throw fast and how well the batter does against fast pitches; similarly with breaking balls, etc.&lt;br /&gt;&lt;br /&gt;In the Netflix competition, each user rates movies on a 1 to 5 star scale, and rates the movie only once. The outcome of a match-up is different as there is no obvious &#34;rating&#34; of the outcome. I used improvement in expected number of runs scored of the outcome of a plate appearance as the &#34;rating&#34; to be predicted (from &lt;a href=&#34;http://www.tangotiger.net/RE9902event.html&#34;&gt;here&lt;/a&gt;). So a single is worth 0.474 runs and an out is worth -0.299 runs. Also, in baseball, there will be many match-ups between the batter and pitcher. I could have averaged the outcomes, but I left the multiple records in the data as is.&lt;br /&gt;&lt;br /&gt;I used 2010 data and removed all pitchers that were hitting and batters that were pitching. According to my data, there were 65,128 unique batter-pitcher match-ups (with about 173,000 plate appearances). I used 5,000 match-ups as validation, 5,000 as testing, and the remaining as training.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Model Fitting&lt;/h3&gt;The first model I used as a baseline just included &#34;biases&#34; for the batter and pitcher, as well as an overall league average bias. In the baseline, there are no factors or interactions. So the result of the match-up between a batter i and pitcher j would be estimated as the overall average bias plus the batter i bias plus the pitcher j bias. In math terms:&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.codecogs.com/eqnedit.php?latex=%5Cdpi%7B120%7D%20%5Cmu@plus;b_i@plus;p_j&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://latex.codecogs.com/png.latex?%5Cdpi%7B120%7D%20%5Cmu+b_i+p_j&#34; title=&#34;\dpi{120} \mu+b_i+p_j&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Higher values for the batter bias mean the batter is better better than average and lower values for the pitcher bias means the pitcher is better than average.&lt;br /&gt;&lt;br /&gt;So as to not overfit the data, I used L2 regularization on the batter and pitcher biases. For this and future estimation, I used the validation data to determine the best penalty and I used a gradient descent method to solve for the parameters.&lt;br /&gt;&lt;br /&gt;Adding in the factor interaction, the result of the match-up between a batter i and pitcher j is&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.codecogs.com/eqnedit.php?latex=%5Cdpi%7B120%7D%20%5Cmu@plus;b_i@plus;p_j%20@plus;%20%5Cboldsymbol%7Bo%7D_i%5ET%20%5Cboldsymbol%7Bd%7D_j&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://latex.codecogs.com/png.latex?%5Cdpi%7B120%7D%20%5Cmu+b_i+p_j%20+%20%5Cboldsymbol%7Bo%7D_i%5ET%20%5Cboldsymbol%7Bd%7D_j&#34; title=&#34;\dpi{120} \mu+b_i+p_j + \boldsymbol{o}_i^T \boldsymbol{d}_j&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;where &lt;a href=&#34;http://www.codecogs.com/eqnedit.php?latex=%5Cdpi%7B120%7D%20%5Cboldsymbol%7Bo%7D_i&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://latex.codecogs.com/png.latex?%5Cdpi%7B120%7D%20%5Cboldsymbol%7Bo%7D_i&#34; title=&#34;\dpi{120} \boldsymbol{o}_i&#34; /&gt;&lt;/a&gt; is a vector of offensive features for batter i and &lt;a href=&#34;http://www.codecogs.com/eqnedit.php?latex=%5Cdpi%7B120%7D%20%5Cboldsymbol%7Bd%7D_j&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://latex.codecogs.com/png.latex?%5Cdpi%7B120%7D%20%5Cboldsymbol%7Bd%7D_j&#34; title=&#34;\dpi{120} \boldsymbol{d}_j&#34; /&gt;&lt;/a&gt; is a set of defensive features for pitcher j. The two vectors must be of the same length which we can determine. Again, I used L2 regularization on the feature vectors.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Results&lt;/h3&gt;I fit the matrix factorization model using 0, 1, 2, 5, and 10 features. The model with 0 features corresponds to the baseline model. As stated above, I was hoping to see that handedness would show up as one of the first features.&lt;br /&gt;&lt;br /&gt;I fit the models with the training set, tuned the regularization parameters with the validation set, and finally I am comparing the models with the test set. Unfortunately, the baseline model performed the best of all and the performance degraded as more features were added. A plot of the test mean squared errors is below. The difference between the models is small, but I believe that is because the regularization parameter is shrinking the factor vectors to 0.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-8doS-OZmBzs/UCUmUQWdo_I/AAAAAAAAHKA/CmE1rs9YYOc/s1600/MatFactTestMSE.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-8doS-OZmBzs/UCUmUQWdo_I/AAAAAAAAHKA/CmE1rs9YYOc/s1600/MatFactTestMSE.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;A further baseline model could have been used -- an overall mean with no biases. The MSE for all but the 10-factor  model were better than this average. So the biases help, but unfortunately the factorization did not.&lt;br /&gt;&lt;br /&gt;I compared the factor vectors of the pitchers by their handedness and I found no difference between righties and lefties.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Summary&lt;/h3&gt;The outcome of this analysis was not what I hoped for, but I still learned something about matrix factorization and its implementation. I think the moral of the story is that it is hard to predict batter-pitcher match-ups, probably because there is a lot of variation in every at bat. Matrix factorization has been successfully applied in situations where the data is much more sparse than this application, so this difference may be a reason for its failure. I plan to try this again with the &lt;a href=&#34;http://www.libfm.org/&#34;&gt;libFM&lt;/a&gt; software to see if I get the same results.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;I implemented this in libFM and basically got the same results, so I guess I was doing it correctly. If I work on this further, I wonder if adding attributes about the pitcher explicitly would help. I would include an indicator for righty/lefty or maybe home/away.&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
